{"version":3,"file":"index.modern.mjs","sources":["../src/shared/utils/Base64Converter.ts","../src/shared/utils/Browser.ts","../src/shared/utils/Delay.ts","../src/shared/utils/HtmlElementFactory.ts","../src/httpClients/retryPolicies/LinearRetryPolicy.ts","../src/httpClients/FetchHttpClient.ts","../src/loggers/abstractions/LogLevel.ts","../src/loggers/ConsoleLogger.ts","../src/loggers/ElasticLogger.ts","../src/services/abstractions/ChallengeWindowSize.ts","../src/services/IFrameChallengeService.ts","../src/services/IFrameDirectoryServerService.ts","../src/services/ThreeDSecureService.ts"],"sourcesContent":["export class Base64Converter {\r\n    static convert(data: object) {\r\n        const json = JSON.stringify(data);\r\n        const base64Json = btoa(json);\r\n        return base64Json\r\n            .replace(/=/g, '')\r\n            .replace(/\\+/g, '-')\r\n            .replace(/\\//g, '_');\r\n    }\r\n}","import { IBrowser } from \"../abstractions\";\r\n\r\nexport class Browser {\r\n    static create(): IBrowser {\r\n        const allowedBrowserColorDepth = [48, 32, 24, 16, 15, 8, 4, 1];\r\n        const colorDepth = allowedBrowserColorDepth.find(x => x <= screen.colorDepth)!;\r\n        return {\r\n            javaEnabled: navigator.javaEnabled(),\r\n            javascriptEnabled: true,\r\n            language: navigator.language,\r\n            userAgent: navigator.userAgent,\r\n            screenWidth: window.screen.width,\r\n            screenHeight: window.screen.height,\r\n            timezoneOffset: new Date().getTimezoneOffset(),\r\n            colorDepth,\r\n            acceptHeader: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'\r\n        };\r\n    }\r\n}","import { IDelay } from \"../abstractions\";\r\n\r\nexport class Delay implements IDelay {\r\n    private _task: Promise<void>;\r\n    private _timeout: NodeJS.Timeout;\r\n    \r\n    constructor(delay: number) {\r\n        this._task = new Promise<void>((resolve) => {\r\n            this._timeout = setTimeout(resolve, delay);\r\n        });\r\n    }\r\n\r\n    wait() {\r\n        return this._task;\r\n    }\r\n\r\n    cancel() {\r\n        clearTimeout(this._timeout);\r\n        this._task = Promise.reject({\r\n            message: 'Timer cancelled'\r\n        });\r\n    }\r\n\r\n    static sleep(delay: number): IDelay {\r\n        return new Delay(delay);\r\n    }\r\n\r\n    static cancel(id: number) {\r\n        clearTimeout(id);\r\n    }\r\n}","import { ICreateForm, ICreateIFrame, ICreateInput } from \"./abstractions\";\r\n\r\nexport class HtmlElementFactory {\r\n    static createIFrame(createIFrame: ICreateIFrame) : HTMLIFrameElement {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.id = createIFrame.name;\r\n        iframe.name = createIFrame.name;\r\n\r\n        if (createIFrame.useDefaultStyle) {\r\n            iframe.setAttribute('style', `border: none;position: absolute; top: 0; left: 0; bottom: 0; right: 0; width: 100%; height: 100%;opacity: ${createIFrame.isVisible ? '1' : '0'}`);\r\n        }\r\n        else {\r\n            iframe.style.opacity = createIFrame.isVisible ? '1' : '0';            \r\n        }\r\n\r\n        createIFrame.parent?.appendChild(iframe);\r\n\r\n        return iframe;\r\n    }\r\n\r\n    static createForm(createForm: ICreateForm): HTMLFormElement {\r\n        const form = document.createElement('form');\r\n        form.id = createForm.name;\r\n        form.name = createForm.name;\r\n        form.action = createForm.actionUrl;\r\n        form.target = createForm.target;\r\n        form.method = createForm.method;\r\n        \r\n        createForm.parent.appendChild(form);\r\n\r\n        return form;\r\n    }\r\n\r\n    static createInput(createInput: ICreateInput): HTMLInputElement {\r\n        const input = document.createElement('input');\r\n        input.id = createInput.name;\r\n        input.name = createInput.name;\r\n        input.type = createInput.type;\r\n        \r\n        createInput.parent.appendChild(input);\r\n\r\n        return input;\r\n    }\r\n}","import { ILog, ILogger } from \"../../loggers/abstractions\";\r\nimport { Delay } from \"../../shared/utils\";\r\nimport { ExecuteFunction, IRetryOptions, IRetryPolicy } from \"../abstractions\";\r\n\r\nexport class LinearRetryPolicy implements IRetryPolicy {\r\n    private readonly _options: IRetryOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IRetryOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n    \r\n    execute<T>(executeFn: ExecuteFunction<T>, method: string) : Promise<T> {\r\n        return new Promise<T>(async (resolve, reject) => {\r\n            let attempt = 1;\r\n            let lastError: ILog|null = null;\r\n            do {\r\n                try {\r\n                    let result = await executeFn({\r\n                        attempt: attempt,\r\n                        maxAttempts: this._options.maxAttempts\r\n                    });\r\n                    if (result.isSuccess) {\r\n                        resolve(result.data);\r\n                        return;\r\n                    }\r\n                    if (!result.isTransientError) {\r\n                        reject(result);\r\n                        return;\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    lastError = {\r\n                        message: `Unhandled error calling \"${method}\"`,\r\n                        error,\r\n                        additionalData: {\r\n                            attempt,\r\n                            maxAttempts: this._options.maxAttempts\r\n                        }\r\n                    };\r\n                    this._logger.log(lastError);\r\n                }\r\n                attempt++;\r\n                await Delay.sleep(this._options.attemptDelay).wait();\r\n            } while (attempt <= this._options.maxAttempts);\r\n\r\n            reject(lastError);\r\n        });\r\n    }\r\n}","import { ILogger } from \"../loggers/abstractions\";\r\nimport { IHttpClient, IHttpClientOptions, IRequest, IRetryPolicy } from \"./abstractions\";\r\nimport { LinearRetryPolicy } from \"./retryPolicies\";\r\n\r\nexport class FetchHttpClient implements IHttpClient {\r\n    private readonly _options: IHttpClientOptions;\r\n    private readonly _retryPolicy: IRetryPolicy;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IHttpClientOptions, logger: ILogger, retryPolicy: IRetryPolicy = new LinearRetryPolicy(options, logger)) {\r\n        this._retryPolicy = retryPolicy;\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n    \r\n    async send<T>(request: IRequest): Promise<T> {\r\n        const self = this;\r\n        return await this._retryPolicy.execute<T>(async ({attempt, maxAttempts}) => {\r\n            const timeout = (self._options.timeoutInSeconds || 30) * 1000;\r\n            const abortController = new AbortController();\r\n            const timeoutId = setTimeout(() => abortController.abort(), timeout);\r\n\r\n            this._logger.log({\r\n                message: '[Request] HttpClient',\r\n                content: {\r\n                    request,\r\n                    attempt,\r\n                    maxAttempts\r\n                }\r\n            });\r\n\r\n            const response = await fetch(request.url, {\r\n                headers: {\r\n                    ...request.headers,\r\n                    'x-attempt': attempt.toString(),\r\n                    'x-max-attempts': maxAttempts.toString(),\r\n                    'accept': 'application/json',\r\n                    'content-type': 'application/json',\r\n                },\r\n                keepalive: true,\r\n                body: JSON.stringify(request.body),\r\n                method: request.method,\r\n                signal: abortController.signal\r\n            });\r\n\r\n            this._logger.log({\r\n                message: '[Response] HttpClient',\r\n                content: {\r\n                    response,\r\n                    attempt,\r\n                    maxAttempts\r\n                }\r\n            });\r\n\r\n            clearTimeout(timeoutId);\r\n            const result = await response.json();\r\n            return {\r\n                isSuccess: response.ok,\r\n                isTransientError: this.isTransientError(response),\r\n                data: response.ok ? result.data : result\r\n            };\r\n        }, `[${request.method}] ${request.url}`);\r\n    }\r\n\r\n    isTransientError(response: Response): boolean {\r\n        const TRANSIENT_STATUS = [409, 424, 500, 503, 504];\r\n\r\n        return TRANSIENT_STATUS.includes(response.status);\r\n    }\r\n}","export enum LogLevel {\r\n    Trace = 0,\r\n    Debug = 1,\r\n    Information = 2,\r\n    Warning = 3,\r\n    Error = 4,\r\n    Critical = 5,\r\n    None = 6\r\n}\r\n","import { ILog, ILogger } from \"./abstractions\";\r\n\r\nexport class ConsoleLogger implements ILogger {\r\n    log(log: ILog): void {\r\n        console.log(JSON.stringify(log));\r\n    }\r\n\r\n}","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { LinearRetryPolicy } from \"../httpClients/retryPolicies\";\r\nimport { IElasticLoggerOptions, ILog, ILogger, LogLevel } from \"./abstractions\";\r\nimport { ConsoleLogger } from \"./ConsoleLogger\";\r\n\r\ninterface IFullLog {\r\n    service: {\r\n        name: string;\r\n        version: string\r\n    },\r\n    executionDate: Date,\r\n    entrypoint: string;\r\n    method: string;\r\n    correlationId: string;\r\n    level: LogLevel;\r\n    customMessage: string;\r\n    message: string;\r\n    content?: object;\r\n    exeption?: object;\r\n}\r\n\r\nexport class ElasticLogger implements ILogger {\r\n    private readonly _httpClient: IHttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IElasticLoggerOptions;\r\n    private _logs: Array<IFullLog> = [];\r\n\r\n    constructor(options: IElasticLoggerOptions,\r\n        logger: ILogger = new ConsoleLogger(),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger, new LinearRetryPolicy({\r\n            maxAttempts: 3,\r\n            attemptDelay: 5000\r\n        }, logger))) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n        this._httpClient = httpClient;\r\n        setInterval(this.sendBatch.bind(this), 1000);\r\n    }\r\n\r\n    log(log: ILog): void {\r\n        this._logger.log(log);\r\n\r\n        if (!this._options.elasticLoggerUrl)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._logs.push({\r\n            customMessage: log.message,\r\n            message: `[FRONTEND] ${log.message}`,\r\n            service: {\r\n                name: 'ThreeDSecure.Service.JS',\r\n                version: '3.0.0'\r\n            },\r\n            executionDate: new Date(),\r\n            entrypoint: 'Execute',\r\n            method: log.method,\r\n            correlationId: log.correlationId,\r\n            content: log.content,\r\n            level: log.level\r\n        });\r\n    }\r\n\r\n    async sendBatch() : Promise<void> {\r\n        const logs = this._logs.splice(0, 10);\r\n        if (!logs.length) {\r\n            return;\r\n        }\r\n        try {\r\n            await this._httpClient.send<void>({\r\n                url: this._options.elasticLoggerUrl,\r\n                method: 'POST',\r\n                body: logs\r\n            });\r\n        } catch (error) {\r\n            this._logger.log({\r\n                error: error,\r\n                message: 'Error sending message to elastic',\r\n                method: 'sendBatch',\r\n                correlationId: logs.map(x => x.correlationId)[0],\r\n                level: LogLevel.Error\r\n            });\r\n        }\r\n    }\r\n}","export enum ChallengeWindowSize {\r\n    width250xheight400 = '01',\r\n    width390xheight400 = '02',\r\n    width500xheight600 = '03',\r\n    width600xheight400 = '04',\r\n    fullscreen = '05'\r\n}\r\n","import { ILogger } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { ChallengeWindowSize, IAuthResponse, IChallengeOptions, IChallengeService } from \"./abstractions\";\r\n\r\nexport class IFrameChallengeService implements IChallengeService {\r\n    private static readonly IFRAME_NAME = 'challengeIframe';\r\n    private static readonly FORM_NAME = 'challengeForm';\r\n    private static readonly CREQ_INPUT_NAME = 'creq';\r\n    private static readonly CREQ_INPUT_TYPE = 'hidden';\r\n\r\n    private readonly _options: IChallengeOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IChallengeOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n\r\n    execute(authResponse: IAuthResponse): Promise<void> {\r\n        if (!authResponse.challengeUrl) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: '[Request] Challenge execution',\r\n                    content: {\r\n                        authResponse\r\n                    }\r\n                });\r\n\r\n                 HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.IFRAME_NAME,\r\n                    isVisible: true,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn\r\n                });\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.FORM_NAME,\r\n                    actionUrl: authResponse.challengeUrl,\r\n                    target: IFrameChallengeService.IFRAME_NAME,\r\n                    method: 'post'\r\n                });\r\n\r\n                const threeDSRequestInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameChallengeService.CREQ_INPUT_NAME,\r\n                    type: IFrameChallengeService.CREQ_INPUT_TYPE\r\n                });\r\n\r\n                const cReq = {\r\n                    threeDSServerTransID: authResponse.processId,\r\n                    acsTransID: authResponse.challengeId,\r\n                    messageVersion: authResponse.challengeVersion,\r\n                    messageType: \"CReq\",\r\n                    challengeWindowSize: this._options.challengeWindowSize || ChallengeWindowSize.width250xheight400\r\n                };\r\n\r\n                const base64CReq = Base64Converter.convert(cReq)\r\n                threeDSRequestInput.value = base64CReq;\r\n\r\n                form.submit();\r\n\r\n                this._logger.log({\r\n                    message: '[Response] Challenge execution',\r\n                    content: {\r\n                        authResponse,\r\n                        cReq,\r\n                        base64CReq\r\n                    }\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: '[Error] Challenge execution',\r\n                    content: {\r\n                        authResponse,\r\n                        error\r\n                    }\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}","import { ILogger } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { IDirectoryServerOptions, IDirectoryServerService } from \"./abstractions\";\r\nimport { IPreAuthResponse } from \"./abstractions/IPreAuthResponse\";\r\n\r\nexport class IFrameDirectoryServerService implements IDirectoryServerService {\r\n    private static readonly IFRAME_NAME: string = 'threeDSMethodIframe';\r\n    private static readonly FORM_NAME: string = 'threeDSMethodForm';\r\n    private static readonly FORM_INPUT_NAME: string = 'threeDSMethodData';\r\n    private static readonly FROM_INPUT_TYPE: string = 'hidden';\r\n\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IDirectoryServerOptions;\r\n\r\n    constructor(options: IDirectoryServerOptions, logger: ILogger) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n\r\n    execute(preAuthResponse: IPreAuthResponse) : Promise<void> {\r\n        if (!preAuthResponse.dsMethodUrl) {\r\n            return Promise.resolve();\r\n        }        \r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: '[Request] DirectoryServer execution',\r\n                    content: {\r\n                        preAuthResponse\r\n                    }\r\n                });\r\n\r\n                const iframe = HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    isVisible: false,\r\n                    name: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn\r\n                });\r\n                this._options.onIFrameCreatedFn?.call(this._options, iframe);\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameDirectoryServerService.FORM_NAME,\r\n                    actionUrl: preAuthResponse.dsMethodUrl,\r\n                    target: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    method: 'POST'\r\n                });\r\n\r\n                const threeDSMethodDataInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameDirectoryServerService.FORM_INPUT_NAME,\r\n                    type: IFrameDirectoryServerService.FROM_INPUT_TYPE\r\n                });\r\n\r\n                const threeDSMethodData = {\r\n                    threeDSServerTransID: preAuthResponse.processId,\r\n                    threeDSMethodNotificationURL: preAuthResponse.notificationUrl\r\n                };\r\n\r\n                const threeDSMethodDataBase64 = Base64Converter.convert(threeDSMethodData)\r\n                threeDSMethodDataInput.value = threeDSMethodDataBase64;\r\n\r\n                form.submit();\r\n\r\n                this._logger.log({\r\n                    message: '[Response] DirectoryServer execution',\r\n                    content: {\r\n                        preAuthResponse,\r\n                        threeDSMethodDataBase64\r\n                    }\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: '[Error] DirectoryServer execution',\r\n                    content: {\r\n                        preAuthResponse,\r\n                        error\r\n                    }\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n}","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { ILogger } from \"../loggers/abstractions\";\r\nimport { ElasticLogger } from \"../loggers\";\r\nimport { Browser } from \"../shared/utils\";\r\nimport { IAuthRequest, IAuthResponse, IChallengeService, IDirectoryServerService, IExecuteRequest, IPostAuthRequest, IPostAuthResponse, IThreeDSecureOptions, IThreeDSecureService } from \"./abstractions\";\r\nimport { IPreAuthRequest } from \"./abstractions/IPreAuthRequest\";\r\nimport { IPreAuthResponse } from \"./abstractions/IPreAuthResponse\";\r\nimport { IFrameChallengeService } from \"./IFrameChallengeService\";\r\nimport { IFrameDirectoryServerService } from \"./IFrameDirectoryServerService\";\r\n\r\n export class ThreeDSecureService implements IThreeDSecureService {\r\n    private readonly _options: IThreeDSecureOptions;\r\n    private readonly _logger: ILogger;\r\n    private readonly _client: IHttpClient;\r\n    private readonly _directoryServer: IDirectoryServerService;\r\n    private readonly _challenge: IChallengeService;\r\n\r\n    constructor(\r\n        options: IThreeDSecureOptions,\r\n        logger: ILogger = new ElasticLogger(options),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger),\r\n        directoryServer: IDirectoryServerService = new IFrameDirectoryServerService(options, logger),\r\n        challenge: IChallengeService = new IFrameChallengeService(options, logger)) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n        this._client = httpClient;\r\n        this._directoryServer = directoryServer;\r\n        this._challenge = challenge;\r\n        this._logger.log({\r\n            message: '3DS configured',\r\n            content: options\r\n        });\r\n    }\r\n\r\n     async execute(request: IExecuteRequest): Promise<IPostAuthResponse> {\r\n        this._logger.log({\r\n            message: '[Request] PreAuth',\r\n            content: request\r\n        });\r\n        let preAuthResponse = await this._preAuth(request);\r\n        this._logger.log({\r\n            message: '[Response] PreAuth',\r\n            content: preAuthResponse\r\n        });\r\n        await this._directoryServer.execute(preAuthResponse);\r\n        this._logger.log({\r\n            message: '[Request] Auth',\r\n            content: preAuthResponse\r\n        });\r\n        let authResponse = await this._auth(preAuthResponse);\r\n        this._logger.log({\r\n            message: '[Response] Auth',\r\n            content: authResponse\r\n        });\r\n        await this._challenge.execute(authResponse);\r\n        this._logger.log({\r\n            message: '[Request] PostAuth',\r\n            content: authResponse\r\n        });\r\n        let postAuthResponse = await this._postAuth(authResponse);\r\n        this._logger.log({\r\n            message: '[Response] PostAuth',\r\n            content: postAuthResponse\r\n        });\r\n        return postAuthResponse;\r\n     }\r\n\r\n     _preAuth(request: IPreAuthRequest): Promise<IPreAuthResponse> {\r\n        return this._client.send<IPreAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/preAuth`,\r\n            method: 'POST',\r\n            body: {\r\n                browser: Browser.create()\r\n            }\r\n        });\r\n     }\r\n\r\n     _auth(request: IAuthRequest): Promise<IAuthResponse> {\r\n        return this._client.send<IAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v1/${request.id}/auth`,\r\n            method: 'POST'\r\n        });\r\n     }\r\n\r\n     _postAuth(request: IPostAuthRequest): Promise<IPostAuthResponse> {\r\n        return this._client.send<IPostAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/postAuth`,\r\n            method: 'POST'\r\n        });\r\n     }\r\n }\r\n\r\n "],"names":["Base64Converter","static","data","json","JSON","stringify","btoa","replace","Browser","colorDepth","find","x","screen","javaEnabled","navigator","javascriptEnabled","language","userAgent","screenWidth","window","width","screenHeight","height","timezoneOffset","Date","getTimezoneOffset","acceptHeader","Delay","constructor","delay","_task","_timeout","this","Promise","resolve","setTimeout","wait","cancel","clearTimeout","reject","message","id","HtmlElementFactory","createIFrame","_createIFrame$parent","iframe","document","createElement","name","useDefaultStyle","setAttribute","isVisible","style","opacity","parent","appendChild","createForm","form","action","actionUrl","target","method","createInput","input","type","LinearRetryPolicy","options","logger","_options","_logger","execute","executeFn","_this","async","attempt","lastError","result","maxAttempts","isSuccess","isTransientError","error","additionalData","log","sleep","attemptDelay","FetchHttpClient","retryPolicy","_retryPolicy","request","self","timeout","timeoutInSeconds","abortController","AbortController","timeoutId","abort","content","response","fetch","url","headers","_extends","toString","accept","keepalive","body","signal","ok","includes","status","LogLevel","ConsoleLogger","console","ElasticLogger","httpClient","_httpClient","_logs","setInterval","sendBatch","bind","elasticLoggerUrl","push","customMessage","service","version","executionDate","entrypoint","correlationId","level","logs","splice","length","send","map","Error","ChallengeWindowSize","IFrameChallengeService","authResponse","challengeUrl","container","IFRAME_NAME","onIFrameCreatedFn","FORM_NAME","threeDSRequestInput","CREQ_INPUT_NAME","CREQ_INPUT_TYPE","cReq","threeDSServerTransID","processId","acsTransID","challengeId","messageVersion","challengeVersion","messageType","challengeWindowSize","width250xheight400","base64CReq","convert","value","submit","IFrameDirectoryServerService","preAuthResponse","dsMethodUrl","_this$_options$onIFra","call","threeDSMethodDataInput","FORM_INPUT_NAME","FROM_INPUT_TYPE","threeDSMethodDataBase64","threeDSMethodNotificationURL","notificationUrl","ThreeDSecureService","directoryServer","challenge","_client","_directoryServer","_challenge","_preAuth","_auth","postAuthResponse","_postAuth","threeDSecureUrl","browser","create"],"mappings":"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"}