{"version":3,"file":"index.module.js","sources":["../src/loggers/abstractions/LogLevel.ts","../src/shared/utils/Stopwatch.ts","../src/shared/utils/Base64Converter.ts","../src/shared/utils/Browser.ts","../src/shared/utils/Delay.ts","../src/shared/utils/HtmlElementFactory.ts","../src/httpClients/retryPolicies/LinearRetryPolicy.ts","../src/httpClients/FetchHttpClient.ts","../src/loggers/ConsoleLogger.ts","../src/loggers/RestLogger.ts","../src/services/abstractions/ChallengeWindowSize.ts","../src/services/IFrameChallengeService.ts","../src/services/IFrameDirectoryServerService.ts","../src/services/ThreeDSecureService.ts"],"sourcesContent":["export enum LogLevel {\r\n    Trace = 0,\r\n    Debug = 1,\r\n    Information = 2,\r\n    Warning = 3,\r\n    Error = 4,\r\n    Critical = 5,\r\n    None = 6\r\n}\r\n","export class Stopwatch {\r\n    private start: number;\r\n    private end: number;\r\n\r\n    constructor() {\r\n        this.start = Date.now();\r\n    }\r\n    \r\n    stop() {\r\n        this.end = Date.now();\r\n    }\r\n\r\n    get elapsed() {\r\n        return (this.end || Date.now()) - this.start;\r\n    }\r\n}","export class Base64Converter {\r\n    static convert(data: object) {\r\n        const json = JSON.stringify(data);\r\n        const base64Json = btoa(json);\r\n        return base64Json\r\n            .replace(/=/g, '')\r\n            .replace(/\\+/g, '-')\r\n            .replace(/\\//g, '_');\r\n    }\r\n}","import { IBrowser } from \"../abstractions\";\r\n\r\nexport class Browser {\r\n    static create(): IBrowser {\r\n        const allowedBrowserColorDepth = [48, 32, 24, 16, 15, 8, 4, 1];\r\n        const colorDepth = allowedBrowserColorDepth.find(x => x <= screen.colorDepth)!;\r\n        return {\r\n            javaEnabled: navigator.javaEnabled(),\r\n            javascriptEnabled: true,\r\n            language: navigator.language,\r\n            userAgent: navigator.userAgent,\r\n            screenWidth: window.screen.width,\r\n            screenHeight: window.screen.height,\r\n            timezoneOffset: new Date().getTimezoneOffset(),\r\n            colorDepth,\r\n            acceptHeader: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'\r\n        };\r\n    }\r\n}","import { IDelay } from \"../abstractions\";\r\n\r\nexport class Delay implements IDelay {\r\n    private _task: Promise<void>;\r\n    private _timeout: NodeJS.Timeout;\r\n    \r\n    constructor(delay: number) {\r\n        this._task = new Promise<void>((resolve) => {\r\n            this._timeout = setTimeout(resolve, delay);\r\n        });\r\n    }\r\n\r\n    wait() {\r\n        return this._task;\r\n    }\r\n\r\n    cancel() {\r\n        clearTimeout(this._timeout);\r\n        this._task = Promise.reject({\r\n            message: 'Timer cancelled'\r\n        });\r\n    }\r\n\r\n    static sleep(delay: number): IDelay {\r\n        return new Delay(delay);\r\n    }\r\n\r\n    static cancel(id: number) {\r\n        clearTimeout(id);\r\n    }\r\n}","import { ICreateForm, ICreateIFrame, ICreateInput } from \"./abstractions\";\r\n\r\nexport class HtmlElementFactory {\r\n    static createIFrame(createIFrame: ICreateIFrame) : HTMLIFrameElement {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.id = createIFrame.name;\r\n        iframe.name = createIFrame.name;\r\n\r\n        if (createIFrame.onReadyFn) {\r\n            createIFrame.onReadyFn(iframe, createIFrame.isVisible);\r\n        }\r\n\r\n        if (createIFrame.onCreatedFn) {\r\n            createIFrame.onCreatedFn(iframe);\r\n            iframe.style.opacity = createIFrame.isVisible ? \"1\" : \"0\";\r\n        } else {\r\n            /* ToDo: Fix this\r\n            iframe.setAttribute(\r\n                \"style\",\r\n                `border: none;position: absolute; top: 0; left: 0; bottom: 0; right: 0; width: 100%; height: 100%;opacity: ${\r\n                    createIFrame.isVisible ? \"1\" : \"0\"\r\n                }`\r\n            );\r\n            */\r\n        }\r\n\r\n        createIFrame.parent.appendChild(iframe);\r\n\r\n        return iframe;\r\n    }\r\n\r\n    static createForm(createForm: ICreateForm): HTMLFormElement {\r\n        const form = document.createElement('form');\r\n        form.id = createForm.name;\r\n        form.name = createForm.name;\r\n        form.action = createForm.actionUrl;\r\n        form.target = createForm.target;\r\n        form.method = createForm.method;\r\n        \r\n        createForm.parent.appendChild(form);\r\n\r\n        return form;\r\n    }\r\n\r\n    static createInput(createInput: ICreateInput): HTMLInputElement {\r\n        const input = document.createElement('input');\r\n        input.id = createInput.name;\r\n        input.name = createInput.name;\r\n        input.type = createInput.type;\r\n        \r\n        createInput.parent.appendChild(input);\r\n\r\n        return input;\r\n    }\r\n}","import { ILogger, LogLevel } from \"../../loggers/abstractions\";\r\nimport { IError } from \"../../shared/abstractions\";\r\nimport { Delay } from \"../../shared/utils\";\r\nimport { IRetryExecution, IRetryOptions, IRetryPolicy } from \"../abstractions\";\r\nimport { IResult } from \"../abstractions/IResult\";\r\n\r\nexport class LinearRetryPolicy implements IRetryPolicy {\r\n    private readonly _options: IRetryOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IRetryOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n    \r\n    execute<T>({\r\n        executeFn,\r\n        method,\r\n        correlationId\r\n    }: IRetryExecution<T>) : Promise<IResult<T>> {\r\n        return new Promise<IResult<T>>(async (resolve, reject) => {\r\n            let attempt = 1;\r\n            let lastError: IError | null = null;\r\n            do {\r\n                try {\r\n                    let result = await executeFn({\r\n                        attempt: attempt,\r\n                        maxAttempts: this._options.maxAttempts\r\n                    });\r\n                    if (result.isSuccess) {\r\n                        resolve(result);\r\n                        return;\r\n                    }\r\n                    if (!result.isTransientError) {\r\n                        reject(result);\r\n                        return;\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    lastError = {\r\n                        message: `Unhandled error calling \"${method}\"`,\r\n                        error,\r\n                        additionalData: {\r\n                            attempt,\r\n                            maxAttempts: this._options.maxAttempts\r\n                        }\r\n                    };\r\n\r\n                    this._logger.log({\r\n                        message: `Unhandled error calling \"${method}\"`,\r\n                        error,\r\n                        content: {\r\n                            attempt,\r\n                            maxAttempts: this._options.maxAttempts\r\n                        },\r\n                        method: method,\r\n                        correlationId: correlationId,\r\n                        level: LogLevel.Warning\r\n                    });\r\n                }\r\n                attempt++;\r\n                await Delay.sleep(this._options.attemptDelay).wait();\r\n            } while (attempt <= this._options.maxAttempts);\r\n\r\n            reject(lastError);\r\n\r\n            this._logger.log({\r\n                message: `Unhandled error calling \"${method}\"`,\r\n                error: lastError?.error,\r\n                content: {\r\n                    attempt,\r\n                    maxAttempts: this._options.maxAttempts\r\n                },\r\n                method: method,\r\n                correlationId: correlationId,\r\n                level: LogLevel.Error\r\n            });\r\n        });\r\n    }\r\n}","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { Stopwatch } from \"../shared/utils/Stopwatch\";\r\nimport { IHttpClient, IHttpClientOptions, IRequest, IRetryPolicy } from \"./abstractions\";\r\nimport { IResult } from \"./abstractions/IResult\";\r\nimport { LinearRetryPolicy } from \"./retryPolicies\";\r\n\r\nexport class FetchHttpClient implements IHttpClient {\r\n    private readonly _options: IHttpClientOptions;\r\n    private readonly _retryPolicy: IRetryPolicy;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IHttpClientOptions, logger: ILogger, retryPolicy: IRetryPolicy = new LinearRetryPolicy(options, logger)) {\r\n        this._retryPolicy = retryPolicy;\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n\r\n    async send<T>(request: IRequest): Promise<IResult<T>> {\r\n        const self = this;\r\n        return await this._retryPolicy.execute<T>({\r\n            executeFn: async ({ attempt, maxAttempts }) => {\r\n                const timeout = (self._options.timeoutInSeconds || 30) * 1000;\r\n                const abortController = new AbortController();\r\n                const timeoutId = setTimeout(() => abortController.abort(), timeout);\r\n                const url = new URL(request.url);\r\n                \r\n                this._logger.log({\r\n                    message: `ExternalService - Request (${url.host})`,\r\n                    content: {\r\n                        request,\r\n                        attempt,\r\n                        maxAttempts\r\n                    },\r\n                    method: \"send\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const stopwatch = new Stopwatch();\r\n                let response : Response;\r\n                try\r\n                {\r\n                    response = await fetch(request.url, {\r\n                        headers: {\r\n                            ...request.headers,\r\n                            'x-attempt': attempt.toString(),\r\n                            'x-max-attempts': maxAttempts.toString(),\r\n                            'accept': 'application/json',\r\n                            'content-type': 'application/json',\r\n                            'correlationId': request.correlationId\r\n                        },\r\n                        keepalive: true,\r\n                        body: JSON.stringify(request.body),\r\n                        method: request.method,\r\n                        signal: abortController.signal\r\n                    });\r\n\r\n                    this._logger.log({\r\n                        message: `ExternalService - Response (${url.host}) in ${stopwatch.elapsed}ms`,\r\n                        content: {\r\n                            request,\r\n                            attempt,\r\n                            maxAttempts,\r\n                            response\r\n                        },\r\n                        method: \"send\",\r\n                        correlationId: request.correlationId,\r\n                        level: LogLevel.Error\r\n                    });\r\n                }\r\n                catch (error) {\r\n                    this._logger.log({\r\n                        message: `ExternalService - Error (${url.host}) in ${stopwatch.elapsed}ms`,\r\n                        content: {\r\n                            request,\r\n                            attempt,\r\n                            maxAttempts,\r\n                            error\r\n                        },\r\n                        method: \"send\",\r\n                        correlationId: request.correlationId,\r\n                        level: LogLevel.Error\r\n                    });\r\n                    throw error;\r\n                }\r\n\r\n                clearTimeout(timeoutId);\r\n                const result : IResult<T> = {\r\n                    isSuccess: response.ok,\r\n                    isTransientError: this.isTransientError(response),\r\n                    getData: async () => {\r\n                        const result = await response.json();\r\n                        return result.data as T;\r\n                    }\r\n                };\r\n                return result;\r\n            },\r\n            method: `[${request.method}] ${request.url}`,\r\n            correlationId: request.correlationId\r\n        });\r\n    }\r\n\r\n    isTransientError(response: Response): boolean {\r\n        const TRANSIENT_STATUS = [409, 424, 500, 503, 504];\r\n\r\n        return TRANSIENT_STATUS.includes(response.status);\r\n    }\r\n}","import { ILog, ILogger } from \"./abstractions\";\r\n\r\nexport class ConsoleLogger implements ILogger {\r\n    flush(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n    \r\n    log(log: ILog): void {\r\n        const errorLog = {\r\n            ...log,\r\n            error: log.error?.toString()\r\n        };\r\n        console.log(errorLog);\r\n    }\r\n\r\n}","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { LinearRetryPolicy } from \"../httpClients/retryPolicies\";\r\nimport { IRestLoggerOptions, ILog, ILogger, LogLevel } from \"./abstractions\";\r\nimport { ConsoleLogger } from \"./ConsoleLogger\";\r\n\r\ninterface IFullLog {\r\n    service: {\r\n        name: string;\r\n        version: string\r\n    },\r\n    environment: 'Development' | 'Staging' | 'Production';\r\n    executionDate: Date,\r\n    entrypoint: string;\r\n    method: string;\r\n    correlationId: string;\r\n    level: LogLevel;\r\n    customMessage: string;\r\n    message: string;\r\n    content?: object;\r\n    exeption?: object;\r\n}\r\n\r\nexport class RestLogger implements ILogger {\r\n    private static readonly DEFAULT_BATCH_TIMEOUT = 5;\r\n    private readonly _httpClient: IHttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IRestLoggerOptions;\r\n    private _logs: Array<IFullLog> = [];\r\n    private _interval: any;\r\n\r\n    constructor(options: IRestLoggerOptions,\r\n        logger: ILogger = new ConsoleLogger(),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger, new LinearRetryPolicy({\r\n            maxAttempts: 3,\r\n            attemptDelay: 5000\r\n        }, logger))) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n        this._httpClient = httpClient;\r\n        this._interval = setInterval(this.sendBatch.bind(this), (this._options.batchLogIntervalInSeconds || RestLogger.DEFAULT_BATCH_TIMEOUT) * 1000);\r\n    }\r\n\r\n    log(log: ILog): void {\r\n        this._logger.log(log);\r\n\r\n        if (!this._options.restLoggerUrl)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._logs.unshift({\r\n            customMessage: log.message,\r\n            message: `[Paybyrd.ThreeDSecure.JS] ${log.message}`,\r\n            service: {\r\n                name: 'Paybyrd.ThreeDSecure.JS',\r\n                version: '3.0.0'\r\n            },\r\n            environment: this._options.environment || 'Development',\r\n            executionDate: new Date(),\r\n            entrypoint: 'Execute',\r\n            method: log.method,\r\n            correlationId: log.correlationId,\r\n            content: {\r\n                ...log.content,\r\n                error: log.error?.toString()\r\n            },\r\n            level: log.level\r\n        });\r\n    }\r\n\r\n    async flush(): Promise<void> {\r\n        clearInterval(this._interval);\r\n        while (this._logs.length) {\r\n            await this.sendBatch();\r\n        }\r\n        this._interval = setInterval(this.sendBatch.bind(this), (this._options.batchLogIntervalInSeconds || RestLogger.DEFAULT_BATCH_TIMEOUT) * 1000);\r\n    }\r\n\r\n    async sendBatch() : Promise<void> {\r\n        const logs = this._logs.splice(0, 10);\r\n        if (!logs.length) {\r\n            return;\r\n        }\r\n        const correlationId = logs.map(x => x.correlationId)[0];\r\n        try {\r\n            await this._httpClient.send<void>({\r\n                url: this._options.restLoggerUrl,\r\n                method: 'POST',\r\n                body: logs,\r\n                correlationId\r\n            });\r\n        } catch (error) {\r\n            this._logger.log({\r\n                error: error,\r\n                message: 'Error sending message to elastic',\r\n                method: 'sendBatch',\r\n                correlationId,\r\n                level: LogLevel.Error\r\n            });\r\n        }\r\n    }\r\n}","export enum ChallengeWindowSize {\r\n    width250xheight400 = '01',\r\n    width390xheight400 = '02',\r\n    width500xheight600 = '03',\r\n    width600xheight400 = '04',\r\n    fullscreen = '05'\r\n}\r\n","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { Stopwatch } from \"../shared/utils/Stopwatch\";\r\nimport { ChallengeWindowSize, IChallengeExecute, IChallengeOptions, IChallengeService } from \"./abstractions\";\r\n\r\nexport class IFrameChallengeService implements IChallengeService {\r\n    private static readonly IFRAME_NAME = 'challengeIframe';\r\n    private static readonly FORM_NAME = 'challengeForm';\r\n    private static readonly CREQ_INPUT_NAME = 'creq';\r\n    private static readonly CREQ_INPUT_TYPE = 'hidden';\r\n\r\n    private readonly _options: IChallengeOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IChallengeOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n\r\n    execute(request: IChallengeExecute): Promise<void> {\r\n        if (!request.authResponse.challengeUrl) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: 'Challenge - Start',\r\n                    content: {\r\n                        authResponse: request.authResponse\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                this._options.container.innerHTML = '';\r\n\r\n                const iFrame = HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.IFRAME_NAME,\r\n                    isVisible: true,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn,\r\n                    onCreatedFn: this._options.onIFrameCreatedFn,\r\n                    onReadyFn: this._options.onIFrameReadyFn\r\n                });\r\n\r\n                this._logger.log({\r\n                    message: 'Challenge - Create iFrame',\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.FORM_NAME,\r\n                    actionUrl: request.authResponse.challengeUrl,\r\n                    target: IFrameChallengeService.IFRAME_NAME,\r\n                    method: 'post'\r\n                });\r\n\r\n                this._logger.log({\r\n                    message: 'Challenge - Create form',\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const threeDSRequestInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameChallengeService.CREQ_INPUT_NAME,\r\n                    type: IFrameChallengeService.CREQ_INPUT_TYPE\r\n                });\r\n\r\n                this._logger.log({\r\n                    message: 'Challenge - Create input',\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const cReq = {\r\n                    threeDSServerTransID: request.authResponse.processId,\r\n                    acsTransID: request.authResponse.challengeId,\r\n                    messageVersion: request.authResponse.challengeVersion,\r\n                    messageType: \"CReq\",\r\n                    challengeWindowSize: this._options.challengeWindowSize || ChallengeWindowSize.width250xheight400\r\n                };\r\n\r\n                const base64CReq = Base64Converter.convert(cReq)\r\n                threeDSRequestInput.value = base64CReq;\r\n\r\n                this._logger.log({\r\n                    message: 'Challenge - Prepare cReq',\r\n                    content: {\r\n                        cReq,\r\n                        base64CReq\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const stopwatch = new Stopwatch();\r\n                const checkIFrameLoaded = () => {\r\n                    const iframeDoc = iFrame.contentDocument || iFrame.contentWindow?.document;\r\n\r\n                    if (iframeDoc?.readyState  == 'complete' ) {\r\n                        this._logger.log({\r\n                                message: `Challenge - iFrame loaded in ${stopwatch.elapsed}ms`,\r\n                                content: {\r\n                                    iFrame: iframeDoc.body.innerText\r\n                                },\r\n                                method: \"executeChallenge\",\r\n                                correlationId: request.correlationId,\r\n                                level: LogLevel.Information\r\n                            });\r\n                        \r\n                        return;\r\n                    } \r\n                \r\n                    // If we are here, it is not loaded. Set things up so we check the status again in 250 milliseconds\r\n                    setTimeout(checkIFrameLoaded, 100);\r\n                }\r\n\r\n                form.submit();\r\n                \r\n                setTimeout(checkIFrameLoaded, 100);\r\n\r\n                this._logger.log({\r\n                    message: 'Challenge - Submit form',\r\n                    content: {\r\n                        authResponse: request.authResponse,\r\n                        cReq,\r\n                        base64CReq\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: 'Challenge - error',\r\n                    content: {\r\n                        authResponse: request.authResponse\r\n                    },\r\n                    error: error,\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Error\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { Stopwatch } from \"../shared/utils/Stopwatch\";\r\nimport { IDirectoryServerExecute, IDirectoryServerOptions, IDirectoryServerService } from \"./abstractions\";\r\n\r\nexport class IFrameDirectoryServerService implements IDirectoryServerService {\r\n    private static readonly IFRAME_NAME: string = 'threeDSMethodIframe';\r\n    private static readonly FORM_NAME: string = 'threeDSMethodForm';\r\n    private static readonly FORM_INPUT_NAME: string = 'threeDSMethodData';\r\n    private static readonly FROM_INPUT_TYPE: string = 'hidden';\r\n\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IDirectoryServerOptions;\r\n\r\n    constructor(options: IDirectoryServerOptions, logger: ILogger) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n\r\n    execute(request: IDirectoryServerExecute) : Promise<void> {\r\n        if (!request.preAuthResponse.dsMethodUrl) {\r\n            return Promise.resolve();\r\n        }        \r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: 'DirectoryServer - Start',\r\n                    content: {\r\n                        preAuthResponse: request\r\n                    },\r\n                    method: 'executeDirectoryServer',\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                this._options.container.innerHTML = '';\r\n\r\n                const iFrame = HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    isVisible: false,\r\n                    name: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn\r\n                });\r\n                this._options.onIFrameCreatedFn?.call(this._options, iFrame);\r\n\r\n                this._logger.log({\r\n                    message: 'DirectoryServer - Create iFrame',\r\n                    method: \"executeDirectoryServer\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameDirectoryServerService.FORM_NAME,\r\n                    actionUrl: request.preAuthResponse.dsMethodUrl,\r\n                    target: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    method: 'POST'\r\n                });\r\n\r\n                this._logger.log({\r\n                    message: 'DirectoryServer - Create Form',\r\n                    method: \"executeDirectoryServer\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const threeDSMethodDataInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameDirectoryServerService.FORM_INPUT_NAME,\r\n                    type: IFrameDirectoryServerService.FROM_INPUT_TYPE\r\n                });\r\n\r\n                this._logger.log({\r\n                    message: 'DirectoryServer - Create Input',\r\n                    method: \"executeDirectoryServer\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const threeDSMethodData = {\r\n                    threeDSServerTransID: request.preAuthResponse.processId,\r\n                    threeDSMethodNotificationURL: request.preAuthResponse.notificationUrl\r\n                };\r\n\r\n                const threeDSMethodDataBase64 = Base64Converter.convert(threeDSMethodData)\r\n                threeDSMethodDataInput.value = threeDSMethodDataBase64;\r\n\r\n                this._logger.log({\r\n                    message: 'DirectoryServer - Prepare threeDSMethodData',\r\n                    content: {\r\n                        threeDSMethodData,\r\n                        threeDSMethodDataBase64\r\n                    },\r\n                    method: \"executeDirectoryServer\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const stopwatch = new Stopwatch();\r\n                const checkIFrameLoaded = () => {\r\n                    const iframeDoc = iFrame.contentDocument || iFrame.contentWindow?.document;\r\n\r\n                    if (iframeDoc?.readyState  == 'complete' ) {\r\n                        this._logger.log({\r\n                                message: `DirectoryServer - iFrame loaded in ${stopwatch.elapsed}ms`,\r\n                                content: {\r\n                                    iFrame: iframeDoc.body.innerText\r\n                                },\r\n                                method: \"executeDirectoryServer\",\r\n                                correlationId: request.correlationId,\r\n                                level: LogLevel.Information\r\n                            });\r\n                        \r\n                        return;\r\n                    } \r\n                \r\n                    // If we are here, it is not loaded. Set things up so we check the status again in 250 milliseconds\r\n                    setTimeout(checkIFrameLoaded, 100);\r\n                }\r\n\r\n                form.submit();\r\n\r\n                setTimeout(checkIFrameLoaded, 100);\r\n\r\n                this._logger.log({\r\n                    message: 'DirectoryServer - Submit form',\r\n                    content: {\r\n                        threeDSMethodData,\r\n                        threeDSMethodDataBase64\r\n                    },\r\n                    method: \"executeDirectoryServer\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: 'DirectoryServer - Error',\r\n                    content: {\r\n                        preAuthResponse: request\r\n                    },\r\n                    error,\r\n                    method: \"directoryServerExecute\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Error\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n}","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { RestLogger } from \"../loggers\";\r\nimport { Browser } from \"../shared/utils\";\r\nimport { IAuthResponse, IChallengeService, IDirectoryServerService, IExecuteRequest, IPostAuthResponse, IThreeDSecureOptions, IThreeDSecureService } from \"./abstractions\";\r\nimport { IPreAuthResponse } from \"./abstractions/IPreAuthResponse\";\r\nimport { IFrameChallengeService } from \"./IFrameChallengeService\";\r\nimport { IFrameDirectoryServerService } from \"./IFrameDirectoryServerService\";\r\n\r\n export class ThreeDSecureService implements IThreeDSecureService {\r\n    private readonly _options: IThreeDSecureOptions;\r\n    private readonly _logger: ILogger;\r\n    private readonly _client: IHttpClient;\r\n    private readonly _directoryServer: IDirectoryServerService;\r\n    private readonly _challenge: IChallengeService;\r\n\r\n    constructor(\r\n        options: IThreeDSecureOptions,\r\n        logger: ILogger = new RestLogger(options),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger),\r\n        directoryServer: IDirectoryServerService = new IFrameDirectoryServerService(options, logger),\r\n        challenge: IChallengeService = new IFrameChallengeService(options, logger)) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n        this._client = httpClient;\r\n        this._directoryServer = directoryServer;\r\n        this._challenge = challenge;\r\n    }\r\n\r\n     async execute(request: IExecuteRequest): Promise<IPostAuthResponse> {\r\n        let preAuthResponse = await this.preAuth(request);\r\n        await this._directoryServer.execute({\r\n            preAuthResponse,\r\n            correlationId: request.correlationId\r\n        });\r\n        let authResponse = await this.auth(request);\r\n        await this._challenge.execute({\r\n            authResponse,\r\n            correlationId: request.correlationId\r\n        });\r\n        let postAuthResponse = await this.postAuth(request);\r\n        await this._logger.flush();\r\n        return postAuthResponse;\r\n     }\r\n\r\n     private async preAuth(request: IExecuteRequest): Promise<IPreAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing PreAuth',\r\n            content: request,\r\n            method: \"_preAuth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        const result = await this._client.send<IPreAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/preAuth`,\r\n            method: 'POST',\r\n            body: {\r\n                browser: Browser.create()\r\n            },\r\n            correlationId: request.correlationId\r\n        });\r\n        return await result.getData();\r\n     }\r\n\r\n     private async auth(request: IExecuteRequest): Promise<IAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing Auth',\r\n            content: request,\r\n            method: \"_auth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        const result = await this._client.send<IAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v1/${request.id}/auth`,\r\n            method: 'POST',\r\n            correlationId: request.correlationId\r\n        });\r\n        return await result.getData();\r\n     }\r\n\r\n     private async postAuth(request: IExecuteRequest): Promise<IPostAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing PostAuth',\r\n            content: request,\r\n            method: \"_postAuth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        const result =  await this._client.send<IPostAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/postAuth`,\r\n            method: 'POST',\r\n            correlationId: request.correlationId\r\n        });\r\n        return await result.getData();\r\n     }\r\n }\r\n\r\n "],"names":["LogLevel","Stopwatch","this","start","end","Date","now","prototype","stop","key","get","Base64Converter","convert","data","json","JSON","stringify","btoa","replace","Browser","create","colorDepth","find","x","screen","javaEnabled","navigator","javascriptEnabled","language","userAgent","screenWidth","window","width","screenHeight","height","timezoneOffset","getTimezoneOffset","acceptHeader","Delay","delay","_this","_task","_timeout","Promise","resolve","setTimeout","_proto","wait","cancel","clearTimeout","reject","message","sleep","id","HtmlElementFactory","createIFrame","iframe","document","createElement","name","onReadyFn","isVisible","onCreatedFn","style","opacity","parent","appendChild","createForm","form","action","actionUrl","target","method","createInput","input","type","pact","state","value","s","o","_settle","bind","then","observer","_Pact","onFulfilled","onRejected","result","callback","v","e","_isSettledPact","thenable","LinearRetryPolicy","options","logger","_options","_logger","execute","_ref","executeFn","correlationId","_exit","_temp4","_result2","_lastError","lastError","log","error","content","attempt","maxAttempts","level","Error","_temp3","_do","_temp2","_result","attemptDelay","_temp","isSuccess","isTransientError","_catch","additionalData","Warning","FetchHttpClient","retryPolicy","_retryPolicy","send","request","self","timeoutId","response","ok","getData","timeout","timeoutInSeconds","abortController","AbortController","abort","url","URL","host","Information","stopwatch","fetch","headers","_extends","toString","accept","keepalive","body","signal","_fetch","elapsed","includes","status","ConsoleLogger","flush","_log$error","errorLog","console","RestLogger","httpClient","_httpClient","_logs","_interval","setInterval","sendBatch","batchLogIntervalInSeconds","DEFAULT_BATCH_TIMEOUT","restLoggerUrl","unshift","customMessage","service","version","environment","executionDate","entrypoint","clearInterval","_for","length","_this2","logs","splice","map","ChallengeWindowSize","IFrameChallengeService","authResponse","challengeUrl","container","innerHTML","iFrame","IFRAME_NAME","useDefaultStyle","onIFrameCreatedFn","onIFrameReadyFn","FORM_NAME","threeDSRequestInput","CREQ_INPUT_NAME","CREQ_INPUT_TYPE","cReq","threeDSServerTransID","processId","acsTransID","challengeId","messageVersion","challengeVersion","messageType","challengeWindowSize","width250xheight400","base64CReq","submit","checkIFrameLoaded","_iFrame$contentWindow","iframeDoc","contentDocument","contentWindow","readyState","innerText","IFrameDirectoryServerService","preAuthResponse","dsMethodUrl","_this$_options$onIFra","call","threeDSMethodDataInput","FORM_INPUT_NAME","FROM_INPUT_TYPE","threeDSMethodData","threeDSMethodNotificationURL","notificationUrl","threeDSMethodDataBase64","ThreeDSecureService","directoryServer","challenge","_client","_directoryServer","_challenge","preAuth","auth","postAuth","postAuthResponse","threeDSecureUrl","browser","_this3","_this4"],"mappings":"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"}