{"version":3,"file":"index.module.js","sources":["../src/loggers/abstractions/LogLevel.ts","../src/shared/utils/Base64Converter.ts","../src/shared/utils/Browser.ts","../src/shared/utils/Delay.ts","../src/shared/utils/HtmlElementFactory.ts","../src/httpClients/retryPolicies/LinearRetryPolicy.ts","../src/httpClients/FetchHttpClient.ts","../src/loggers/ConsoleLogger.ts","../src/loggers/ElasticLogger.ts","../src/services/abstractions/ChallengeWindowSize.ts","../src/services/IFrameChallengeService.ts","../src/services/IFrameDirectoryServerService.ts","../src/services/ThreeDSecureService.ts"],"sourcesContent":["export enum LogLevel {\r\n    Trace = 0,\r\n    Debug = 1,\r\n    Information = 2,\r\n    Warning = 3,\r\n    Error = 4,\r\n    Critical = 5,\r\n    None = 6\r\n}\r\n","export class Base64Converter {\r\n    static convert(data: object) {\r\n        const json = JSON.stringify(data);\r\n        const base64Json = btoa(json);\r\n        return base64Json\r\n            .replace(/=/g, '')\r\n            .replace(/\\+/g, '-')\r\n            .replace(/\\//g, '_');\r\n    }\r\n}","import { IBrowser } from \"../abstractions\";\r\n\r\nexport class Browser {\r\n    static create(): IBrowser {\r\n        const allowedBrowserColorDepth = [48, 32, 24, 16, 15, 8, 4, 1];\r\n        const colorDepth = allowedBrowserColorDepth.find(x => x <= screen.colorDepth)!;\r\n        return {\r\n            javaEnabled: navigator.javaEnabled(),\r\n            javascriptEnabled: true,\r\n            language: navigator.language,\r\n            userAgent: navigator.userAgent,\r\n            screenWidth: window.screen.width,\r\n            screenHeight: window.screen.height,\r\n            timezoneOffset: new Date().getTimezoneOffset(),\r\n            colorDepth,\r\n            acceptHeader: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'\r\n        };\r\n    }\r\n}","import { IDelay } from \"../abstractions\";\r\n\r\nexport class Delay implements IDelay {\r\n    private _task: Promise<void>;\r\n    private _timeout: NodeJS.Timeout;\r\n    \r\n    constructor(delay: number) {\r\n        this._task = new Promise<void>((resolve) => {\r\n            this._timeout = setTimeout(resolve, delay);\r\n        });\r\n    }\r\n\r\n    wait() {\r\n        return this._task;\r\n    }\r\n\r\n    cancel() {\r\n        clearTimeout(this._timeout);\r\n        this._task = Promise.reject({\r\n            message: 'Timer cancelled'\r\n        });\r\n    }\r\n\r\n    static sleep(delay: number): IDelay {\r\n        return new Delay(delay);\r\n    }\r\n\r\n    static cancel(id: number) {\r\n        clearTimeout(id);\r\n    }\r\n}","import { ICreateForm, ICreateIFrame, ICreateInput } from \"./abstractions\";\r\n\r\nexport class HtmlElementFactory {\r\n    static createIFrame(createIFrame: ICreateIFrame) : HTMLIFrameElement {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.id = createIFrame.name;\r\n        iframe.name = createIFrame.name;\r\n\r\n        if (createIFrame.useDefaultStyle) {\r\n            iframe.setAttribute('style', `border: none;position: absolute; top: 0; left: 0; bottom: 0; right: 0; width: 100%; height: 100%;opacity: ${createIFrame.isVisible ? '1' : '0'}`);\r\n        }\r\n        else {\r\n            iframe.style.opacity = createIFrame.isVisible ? '1' : '0';            \r\n        }\r\n\r\n        createIFrame.parent?.appendChild(iframe);\r\n\r\n        return iframe;\r\n    }\r\n\r\n    static createForm(createForm: ICreateForm): HTMLFormElement {\r\n        const form = document.createElement('form');\r\n        form.id = createForm.name;\r\n        form.name = createForm.name;\r\n        form.action = createForm.actionUrl;\r\n        form.target = createForm.target;\r\n        form.method = createForm.method;\r\n        \r\n        createForm.parent.appendChild(form);\r\n\r\n        return form;\r\n    }\r\n\r\n    static createInput(createInput: ICreateInput): HTMLInputElement {\r\n        const input = document.createElement('input');\r\n        input.id = createInput.name;\r\n        input.name = createInput.name;\r\n        input.type = createInput.type;\r\n        \r\n        createInput.parent.appendChild(input);\r\n\r\n        return input;\r\n    }\r\n}","import { ILogger, LogLevel } from \"../../loggers/abstractions\";\r\nimport { IError } from \"../../shared/abstractions\";\r\nimport { Delay } from \"../../shared/utils\";\r\nimport { IRetryExecution, IRetryOptions, IRetryPolicy } from \"../abstractions\";\r\n\r\nexport class LinearRetryPolicy implements IRetryPolicy {\r\n    private readonly _options: IRetryOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IRetryOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n    \r\n    execute<T>({\r\n        executeFn,\r\n        method,\r\n        correlationId\r\n    }: IRetryExecution<T>) : Promise<T> {\r\n        return new Promise<T>(async (resolve, reject) => {\r\n            let attempt = 1;\r\n            let lastError: IError|null = null;\r\n            do {\r\n                try {\r\n                    let result = await executeFn({\r\n                        attempt: attempt,\r\n                        maxAttempts: this._options.maxAttempts\r\n                    });\r\n                    if (result.isSuccess) {\r\n                        resolve(result.data);\r\n                        return;\r\n                    }\r\n                    if (!result.isTransientError) {\r\n                        reject(result);\r\n                        return;\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    lastError = {\r\n                        message: `Unhandled error calling \"${method}\"`,\r\n                        error,\r\n                        additionalData: {\r\n                            attempt,\r\n                            maxAttempts: this._options.maxAttempts\r\n                        }\r\n                    };\r\n\r\n                    this._logger.log({\r\n                        message: `Unhandled error calling \"${method}\"`,\r\n                        error,\r\n                        content: {\r\n                            attempt,\r\n                            maxAttempts: this._options.maxAttempts\r\n                        },\r\n                        method: method,\r\n                        correlationId: correlationId,\r\n                        level: LogLevel.Warning\r\n                    });\r\n                }\r\n                attempt++;\r\n                await Delay.sleep(this._options.attemptDelay).wait();\r\n            } while (attempt <= this._options.maxAttempts);\r\n\r\n            reject(lastError);\r\n\r\n            this._logger.log({\r\n                message: `Unhandled error calling \"${method}\"`,\r\n                error: lastError?.error,\r\n                content: {\r\n                    attempt,\r\n                    maxAttempts: this._options.maxAttempts\r\n                },\r\n                method: method,\r\n                correlationId: correlationId,\r\n                level: LogLevel.Error\r\n            });\r\n        });\r\n    }\r\n}","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { IHttpClient, IHttpClientOptions, IRequest, IRetryPolicy } from \"./abstractions\";\r\nimport { LinearRetryPolicy } from \"./retryPolicies\";\r\n\r\nexport class FetchHttpClient implements IHttpClient {\r\n    private readonly _options: IHttpClientOptions;\r\n    private readonly _retryPolicy: IRetryPolicy;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IHttpClientOptions, logger: ILogger, retryPolicy: IRetryPolicy = new LinearRetryPolicy(options, logger)) {\r\n        this._retryPolicy = retryPolicy;\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n\r\n    async send<T>(request: IRequest): Promise<T> {\r\n        const self = this;\r\n        return await this._retryPolicy.execute<T>({\r\n            executeFn: async ({ attempt, maxAttempts }) => {\r\n                const timeout = (self._options.timeoutInSeconds || 30) * 1000;\r\n                const abortController = new AbortController();\r\n                const timeoutId = setTimeout(() => abortController.abort(), timeout);\r\n\r\n                this._logger.log({\r\n                    message: '[Request] HttpClient',\r\n                    content: {\r\n                        request,\r\n                        attempt,\r\n                        maxAttempts\r\n                    },\r\n                    method: \"send\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const response = await fetch(request.url, {\r\n                    headers: {\r\n                        ...request.headers,\r\n                        'x-attempt': attempt.toString(),\r\n                        'x-max-attempts': maxAttempts.toString(),\r\n                        'accept': 'application/json',\r\n                        'content-type': 'application/json',\r\n                    },\r\n                    keepalive: true,\r\n                    body: JSON.stringify(request.body),\r\n                    method: request.method,\r\n                    signal: abortController.signal\r\n                });\r\n\r\n                this._logger.log({\r\n                    message: '[Response] HttpClient',\r\n                    content: {\r\n                        response,\r\n                        attempt,\r\n                        maxAttempts\r\n                    },\r\n                    method: \"send\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                clearTimeout(timeoutId);\r\n                const result = await response.json();\r\n                return {\r\n                    isSuccess: response.ok,\r\n                    isTransientError: this.isTransientError(response),\r\n                    data: response.ok ? result.data : result\r\n                };\r\n            },\r\n            method: `[${request.method}] ${request.url}`,\r\n            correlationId: request.correlationId\r\n        });\r\n    }\r\n\r\n    isTransientError(response: Response): boolean {\r\n        const TRANSIENT_STATUS = [409, 424, 500, 503, 504];\r\n\r\n        return TRANSIENT_STATUS.includes(response.status);\r\n    }\r\n}","import { ILog, ILogger } from \"./abstractions\";\r\n\r\nexport class ConsoleLogger implements ILogger {\r\n    flush(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n    \r\n    log(log: ILog): void {\r\n        console.log(JSON.stringify(log));\r\n    }\r\n\r\n}","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { LinearRetryPolicy } from \"../httpClients/retryPolicies\";\r\nimport { IElasticLoggerOptions, ILog, ILogger, LogLevel } from \"./abstractions\";\r\nimport { ConsoleLogger } from \"./ConsoleLogger\";\r\n\r\ninterface IFullLog {\r\n    service: {\r\n        name: string;\r\n        version: string\r\n    },\r\n    executionDate: Date,\r\n    entrypoint: string;\r\n    method: string;\r\n    correlationId: string;\r\n    level: LogLevel;\r\n    customMessage: string;\r\n    message: string;\r\n    content?: object;\r\n    exeption?: object;\r\n}\r\n\r\nexport class ElasticLogger implements ILogger {\r\n    private static readonly DEFAULT_BATCH_TIMEOUT = 5;\r\n    private readonly _httpClient: IHttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IElasticLoggerOptions;\r\n    private _logs: Array<IFullLog> = [];\r\n    private _interval: NodeJS.Timer;\r\n\r\n    constructor(options: IElasticLoggerOptions,\r\n        logger: ILogger = new ConsoleLogger(),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger, new LinearRetryPolicy({\r\n            maxAttempts: 3,\r\n            attemptDelay: 5000\r\n        }, logger))) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n        this._httpClient = httpClient;\r\n        this._interval = setInterval(this.sendBatch.bind(this), (this._options.batchLogIntervalInSeconds || ElasticLogger.DEFAULT_BATCH_TIMEOUT) * 1000);\r\n    }\r\n\r\n    log(log: ILog): void {\r\n        this._logger.log(log);\r\n\r\n        if (!this._options.elasticLoggerUrl)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._logs.push({\r\n            customMessage: log.message,\r\n            message: `[FRONTEND] ${log.message}`,\r\n            service: {\r\n                name: 'ThreeDSecure.Service.JS',\r\n                version: '3.0.0'\r\n            },\r\n            executionDate: new Date(),\r\n            entrypoint: 'Execute',\r\n            method: log.method,\r\n            correlationId: log.correlationId,\r\n            content: log.content,\r\n            level: log.level\r\n        });\r\n    }\r\n\r\n    async flush(): Promise<void> {\r\n        clearInterval(this._interval);\r\n        while (this._logs.length) {\r\n            await this.sendBatch();\r\n        }\r\n        this._interval = setInterval(this.sendBatch.bind(this), (this._options.batchLogIntervalInSeconds || ElasticLogger.DEFAULT_BATCH_TIMEOUT) * 1000);\r\n    }\r\n\r\n    async sendBatch() : Promise<void> {\r\n        const logs = this._logs.splice(0, 10);\r\n        if (!logs.length) {\r\n            return;\r\n        }\r\n        const correlationId = logs.map(x => x.correlationId)[0];\r\n        try {\r\n            await this._httpClient.send<void>({\r\n                url: this._options.elasticLoggerUrl,\r\n                method: 'POST',\r\n                body: logs,\r\n                correlationId\r\n            });\r\n        } catch (error) {\r\n            this._logger.log({\r\n                error: error,\r\n                message: 'Error sending message to elastic',\r\n                method: 'sendBatch',\r\n                correlationId,\r\n                level: LogLevel.Error\r\n            });\r\n        }\r\n    }\r\n}","export enum ChallengeWindowSize {\r\n    width250xheight400 = '01',\r\n    width390xheight400 = '02',\r\n    width500xheight600 = '03',\r\n    width600xheight400 = '04',\r\n    fullscreen = '05'\r\n}\r\n","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { ChallengeWindowSize, IChallengeExecute, IChallengeOptions, IChallengeService } from \"./abstractions\";\r\n\r\nexport class IFrameChallengeService implements IChallengeService {\r\n    private static readonly IFRAME_NAME = 'challengeIframe';\r\n    private static readonly FORM_NAME = 'challengeForm';\r\n    private static readonly CREQ_INPUT_NAME = 'creq';\r\n    private static readonly CREQ_INPUT_TYPE = 'hidden';\r\n\r\n    private readonly _options: IChallengeOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IChallengeOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n\r\n    execute(request: IChallengeExecute): Promise<void> {\r\n        if (!request.authResponse.challengeUrl) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: '[Request] Challenge execution',\r\n                    content: {\r\n                        authResponse: request.authResponse\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                 HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.IFRAME_NAME,\r\n                    isVisible: true,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn\r\n                });\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.FORM_NAME,\r\n                    actionUrl: request.authResponse.challengeUrl,\r\n                    target: IFrameChallengeService.IFRAME_NAME,\r\n                    method: 'post'\r\n                });\r\n\r\n                const threeDSRequestInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameChallengeService.CREQ_INPUT_NAME,\r\n                    type: IFrameChallengeService.CREQ_INPUT_TYPE\r\n                });\r\n\r\n                const cReq = {\r\n                    threeDSServerTransID: request.authResponse.processId,\r\n                    acsTransID: request.authResponse.challengeId,\r\n                    messageVersion: request.authResponse.challengeVersion,\r\n                    messageType: \"CReq\",\r\n                    challengeWindowSize: this._options.challengeWindowSize || ChallengeWindowSize.width250xheight400\r\n                };\r\n\r\n                const base64CReq = Base64Converter.convert(cReq)\r\n                threeDSRequestInput.value = base64CReq;\r\n\r\n                form.submit();\r\n\r\n                this._logger.log({\r\n                    message: '[Response] Challenge execution',\r\n                    content: {\r\n                        authResponse: request.authResponse,\r\n                        cReq,\r\n                        base64CReq\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: '[Error] Challenge execution',\r\n                    content: {\r\n                        authResponse: request.authResponse,\r\n                        error\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Error\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { IDirectoryServerExecute, IDirectoryServerOptions, IDirectoryServerService } from \"./abstractions\";\r\n\r\nexport class IFrameDirectoryServerService implements IDirectoryServerService {\r\n    private static readonly IFRAME_NAME: string = 'threeDSMethodIframe';\r\n    private static readonly FORM_NAME: string = 'threeDSMethodForm';\r\n    private static readonly FORM_INPUT_NAME: string = 'threeDSMethodData';\r\n    private static readonly FROM_INPUT_TYPE: string = 'hidden';\r\n\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IDirectoryServerOptions;\r\n\r\n    constructor(options: IDirectoryServerOptions, logger: ILogger) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n\r\n    execute(request: IDirectoryServerExecute) : Promise<void> {\r\n        if (!request.preAuthResponse.dsMethodUrl) {\r\n            return Promise.resolve();\r\n        }        \r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: '[Request] DirectoryServer execution',\r\n                    content: request,\r\n                    method: \"directoryServerExecute\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const iframe = HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    isVisible: false,\r\n                    name: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn\r\n                });\r\n                this._options.onIFrameCreatedFn?.call(this._options, iframe);\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameDirectoryServerService.FORM_NAME,\r\n                    actionUrl: request.preAuthResponse.dsMethodUrl,\r\n                    target: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    method: 'POST'\r\n                });\r\n\r\n                const threeDSMethodDataInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameDirectoryServerService.FORM_INPUT_NAME,\r\n                    type: IFrameDirectoryServerService.FROM_INPUT_TYPE\r\n                });\r\n\r\n                const threeDSMethodData = {\r\n                    threeDSServerTransID: request.preAuthResponse.processId,\r\n                    threeDSMethodNotificationURL: request.preAuthResponse.notificationUrl\r\n                };\r\n\r\n                const threeDSMethodDataBase64 = Base64Converter.convert(threeDSMethodData)\r\n                threeDSMethodDataInput.value = threeDSMethodDataBase64;\r\n\r\n                form.submit();\r\n\r\n                this._logger.log({\r\n                    message: '[Response] DirectoryServer execution',\r\n                    content: {\r\n                        request,\r\n                        threeDSMethodDataBase64\r\n                    },\r\n                    method: \"directoryServerExecute\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: '[Error] DirectoryServer execution',\r\n                    content: {\r\n                        request,\r\n                        error\r\n                    },\r\n                    method: \"directoryServerExecute\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Error\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n}","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { ElasticLogger } from \"../loggers\";\r\nimport { Browser } from \"../shared/utils\";\r\nimport { IAuthResponse, IChallengeService, IDirectoryServerService, IExecuteRequest, IPostAuthResponse, IThreeDSecureOptions, IThreeDSecureService } from \"./abstractions\";\r\nimport { IPreAuthResponse } from \"./abstractions/IPreAuthResponse\";\r\nimport { IFrameChallengeService } from \"./IFrameChallengeService\";\r\nimport { IFrameDirectoryServerService } from \"./IFrameDirectoryServerService\";\r\n\r\n export class ThreeDSecureService implements IThreeDSecureService {\r\n    private readonly _options: IThreeDSecureOptions;\r\n    private readonly _logger: ILogger;\r\n    private readonly _client: IHttpClient;\r\n    private readonly _directoryServer: IDirectoryServerService;\r\n    private readonly _challenge: IChallengeService;\r\n\r\n    constructor(\r\n        options: IThreeDSecureOptions,\r\n        logger: ILogger = new ElasticLogger(options),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger),\r\n        directoryServer: IDirectoryServerService = new IFrameDirectoryServerService(options, logger),\r\n        challenge: IChallengeService = new IFrameChallengeService(options, logger)) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n        this._client = httpClient;\r\n        this._directoryServer = directoryServer;\r\n        this._challenge = challenge;\r\n    }\r\n\r\n     async execute(request: IExecuteRequest): Promise<IPostAuthResponse> {\r\n        let preAuthResponse = await this._preAuth(request);\r\n        await this._directoryServer.execute({\r\n            preAuthResponse,\r\n            correlationId: request.correlationId\r\n        });\r\n        let authResponse = await this._auth(request);\r\n        await this._challenge.execute({\r\n            authResponse,\r\n            correlationId: request.correlationId\r\n        });\r\n        let postAuthResponse = await this._postAuth(request);\r\n        await this._logger.flush();\r\n        return postAuthResponse;\r\n     }\r\n\r\n     _preAuth(request: IExecuteRequest): Promise<IPreAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing PreAuth',\r\n            content: request,\r\n            method: \"_preAuth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        return this._client.send<IPreAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/preAuth`,\r\n            method: 'POST',\r\n            body: {\r\n                browser: Browser.create()\r\n            },\r\n            correlationId: request.correlationId\r\n        });\r\n     }\r\n\r\n     _auth(request: IExecuteRequest): Promise<IAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing Auth',\r\n            content: request,\r\n            method: \"_auth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        return this._client.send<IAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v1/${request.id}/auth`,\r\n            method: 'POST',\r\n            correlationId: request.correlationId\r\n        });\r\n     }\r\n\r\n     _postAuth(request: IExecuteRequest): Promise<IPostAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing PostAuth',\r\n            content: request,\r\n            method: \"_postAuth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        return this._client.send<IPostAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/postAuth`,\r\n            method: 'POST',\r\n            correlationId: request.correlationId\r\n        });\r\n     }\r\n }\r\n\r\n "],"names":["LogLevel","Base64Converter","convert","data","json","JSON","stringify","btoa","replace","Browser","create","colorDepth","find","x","screen","javaEnabled","navigator","javascriptEnabled","language","userAgent","screenWidth","window","width","screenHeight","height","timezoneOffset","Date","getTimezoneOffset","acceptHeader","Delay","delay","_this","this","_task","_timeout","Promise","resolve","setTimeout","_proto","prototype","wait","cancel","clearTimeout","reject","message","sleep","id","HtmlElementFactory","createIFrame","_createIFrame$parent","iframe","document","createElement","name","useDefaultStyle","setAttribute","isVisible","style","opacity","parent","appendChild","createForm","form","action","actionUrl","target","method","createInput","input","type","pact","state","value","s","o","_settle","bind","then","observer","_Pact","onFulfilled","onRejected","result","callback","v","e","_isSettledPact","thenable","LinearRetryPolicy","options","logger","_options","_logger","execute","_ref","executeFn","correlationId","_exit","_temp4","_result2","_lastError","lastError","log","error","content","attempt","maxAttempts","level","Error","_temp3","_do","_temp2","_result","attemptDelay","_temp","isSuccess","isTransientError","_catch","additionalData","Warning","FetchHttpClient","retryPolicy","_retryPolicy","send","request","self","timeout","timeoutInSeconds","abortController","AbortController","timeoutId","abort","Information","fetch","url","headers","_extends","toString","accept","keepalive","body","signal","response","ok","includes","status","ConsoleLogger","flush","console","ElasticLogger","httpClient","_httpClient","_logs","_interval","setInterval","sendBatch","batchLogIntervalInSeconds","DEFAULT_BATCH_TIMEOUT","elasticLoggerUrl","push","customMessage","service","version","executionDate","entrypoint","clearInterval","_for","length","_this2","logs","splice","map","ChallengeWindowSize","IFrameChallengeService","authResponse","challengeUrl","container","IFRAME_NAME","onIFrameCreatedFn","FORM_NAME","threeDSRequestInput","CREQ_INPUT_NAME","CREQ_INPUT_TYPE","cReq","threeDSServerTransID","processId","acsTransID","challengeId","messageVersion","challengeVersion","messageType","challengeWindowSize","width250xheight400","base64CReq","submit","IFrameDirectoryServerService","preAuthResponse","dsMethodUrl","_this$_options$onIFra","call","threeDSMethodDataInput","FORM_INPUT_NAME","FROM_INPUT_TYPE","threeDSMethodDataBase64","threeDSMethodNotificationURL","notificationUrl","ThreeDSecureService","directoryServer","challenge","_client","_directoryServer","_challenge","_preAuth","_auth","_postAuth","postAuthResponse","threeDSecureUrl","browser"],"mappings":"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"}