{"version":3,"file":"index.modern.mjs","sources":["../src/loggers/abstractions/LogLevel.ts","../src/shared/utils/Base64Converter.ts","../src/shared/utils/Browser.ts","../src/shared/utils/Delay.ts","../src/shared/utils/HtmlElementFactory.ts","../src/httpClients/retryPolicies/LinearRetryPolicy.ts","../src/httpClients/FetchHttpClient.ts","../src/loggers/ConsoleLogger.ts","../src/loggers/ElasticLogger.ts","../src/services/abstractions/ChallengeWindowSize.ts","../src/services/IFrameChallengeService.ts","../src/services/IFrameDirectoryServerService.ts","../src/services/ThreeDSecureService.ts"],"sourcesContent":["export enum LogLevel {\r\n    Trace = 0,\r\n    Debug = 1,\r\n    Information = 2,\r\n    Warning = 3,\r\n    Error = 4,\r\n    Critical = 5,\r\n    None = 6\r\n}\r\n","export class Base64Converter {\r\n    static convert(data: object) {\r\n        const json = JSON.stringify(data);\r\n        const base64Json = btoa(json);\r\n        return base64Json\r\n            .replace(/=/g, '')\r\n            .replace(/\\+/g, '-')\r\n            .replace(/\\//g, '_');\r\n    }\r\n}","import { IBrowser } from \"../abstractions\";\r\n\r\nexport class Browser {\r\n    static create(): IBrowser {\r\n        const allowedBrowserColorDepth = [48, 32, 24, 16, 15, 8, 4, 1];\r\n        const colorDepth = allowedBrowserColorDepth.find(x => x <= screen.colorDepth)!;\r\n        return {\r\n            javaEnabled: navigator.javaEnabled(),\r\n            javascriptEnabled: true,\r\n            language: navigator.language,\r\n            userAgent: navigator.userAgent,\r\n            screenWidth: window.screen.width,\r\n            screenHeight: window.screen.height,\r\n            timezoneOffset: new Date().getTimezoneOffset(),\r\n            colorDepth,\r\n            acceptHeader: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'\r\n        };\r\n    }\r\n}","import { IDelay } from \"../abstractions\";\r\n\r\nexport class Delay implements IDelay {\r\n    private _task: Promise<void>;\r\n    private _timeout: NodeJS.Timeout;\r\n    \r\n    constructor(delay: number) {\r\n        this._task = new Promise<void>((resolve) => {\r\n            this._timeout = setTimeout(resolve, delay);\r\n        });\r\n    }\r\n\r\n    wait() {\r\n        return this._task;\r\n    }\r\n\r\n    cancel() {\r\n        clearTimeout(this._timeout);\r\n        this._task = Promise.reject({\r\n            message: 'Timer cancelled'\r\n        });\r\n    }\r\n\r\n    static sleep(delay: number): IDelay {\r\n        return new Delay(delay);\r\n    }\r\n\r\n    static cancel(id: number) {\r\n        clearTimeout(id);\r\n    }\r\n}","import { ICreateForm, ICreateIFrame, ICreateInput } from \"./abstractions\";\r\n\r\nexport class HtmlElementFactory {\r\n    static createIFrame(createIFrame: ICreateIFrame) : HTMLIFrameElement {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.id = createIFrame.name;\r\n        iframe.name = createIFrame.name;\r\n\r\n        if (createIFrame.useDefaultStyle) {\r\n            iframe.setAttribute('style', `border: none;position: absolute; top: 0; left: 0; bottom: 0; right: 0; width: 100%; height: 100%;opacity: ${createIFrame.isVisible ? '1' : '0'}`);\r\n        }\r\n        else {\r\n            iframe.style.opacity = createIFrame.isVisible ? '1' : '0';            \r\n        }\r\n\r\n        createIFrame.parent?.appendChild(iframe);\r\n\r\n        return iframe;\r\n    }\r\n\r\n    static createForm(createForm: ICreateForm): HTMLFormElement {\r\n        const form = document.createElement('form');\r\n        form.id = createForm.name;\r\n        form.name = createForm.name;\r\n        form.action = createForm.actionUrl;\r\n        form.target = createForm.target;\r\n        form.method = createForm.method;\r\n        \r\n        createForm.parent.appendChild(form);\r\n\r\n        return form;\r\n    }\r\n\r\n    static createInput(createInput: ICreateInput): HTMLInputElement {\r\n        const input = document.createElement('input');\r\n        input.id = createInput.name;\r\n        input.name = createInput.name;\r\n        input.type = createInput.type;\r\n        \r\n        createInput.parent.appendChild(input);\r\n\r\n        return input;\r\n    }\r\n}","import { ILogger, LogLevel } from \"../../loggers/abstractions\";\r\nimport { IError } from \"../../shared/abstractions\";\r\nimport { Delay } from \"../../shared/utils\";\r\nimport { IRetryExecution, IRetryOptions, IRetryPolicy } from \"../abstractions\";\r\n\r\nexport class LinearRetryPolicy implements IRetryPolicy {\r\n    private readonly _options: IRetryOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IRetryOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n    \r\n    execute<T>({\r\n        executeFn,\r\n        method,\r\n        correlationId\r\n    }: IRetryExecution<T>) : Promise<T> {\r\n        return new Promise<T>(async (resolve, reject) => {\r\n            let attempt = 1;\r\n            let lastError: IError|null = null;\r\n            do {\r\n                try {\r\n                    let result = await executeFn({\r\n                        attempt: attempt,\r\n                        maxAttempts: this._options.maxAttempts\r\n                    });\r\n                    if (result.isSuccess) {\r\n                        resolve(result.data);\r\n                        return;\r\n                    }\r\n                    if (!result.isTransientError) {\r\n                        reject(result);\r\n                        return;\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    lastError = {\r\n                        message: `Unhandled error calling \"${method}\"`,\r\n                        error,\r\n                        additionalData: {\r\n                            attempt,\r\n                            maxAttempts: this._options.maxAttempts\r\n                        }\r\n                    };\r\n\r\n                    this._logger.log({\r\n                        message: `Unhandled error calling \"${method}\"`,\r\n                        error,\r\n                        content: {\r\n                            attempt,\r\n                            maxAttempts: this._options.maxAttempts\r\n                        },\r\n                        method: method,\r\n                        correlationId: correlationId,\r\n                        level: LogLevel.Warning\r\n                    });\r\n                }\r\n                attempt++;\r\n                await Delay.sleep(this._options.attemptDelay).wait();\r\n            } while (attempt <= this._options.maxAttempts);\r\n\r\n            reject(lastError);\r\n\r\n            this._logger.log({\r\n                message: `Unhandled error calling \"${method}\"`,\r\n                error: lastError?.error,\r\n                content: {\r\n                    attempt,\r\n                    maxAttempts: this._options.maxAttempts\r\n                },\r\n                method: method,\r\n                correlationId: correlationId,\r\n                level: LogLevel.Error\r\n            });\r\n        });\r\n    }\r\n}","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { IHttpClient, IHttpClientOptions, IRequest, IRetryPolicy } from \"./abstractions\";\r\nimport { LinearRetryPolicy } from \"./retryPolicies\";\r\n\r\nexport class FetchHttpClient implements IHttpClient {\r\n    private readonly _options: IHttpClientOptions;\r\n    private readonly _retryPolicy: IRetryPolicy;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IHttpClientOptions, logger: ILogger, retryPolicy: IRetryPolicy = new LinearRetryPolicy(options, logger)) {\r\n        this._retryPolicy = retryPolicy;\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n\r\n    async send<T>(request: IRequest): Promise<T> {\r\n        const self = this;\r\n        return await this._retryPolicy.execute<T>({\r\n            executeFn: async ({ attempt, maxAttempts }) => {\r\n                const timeout = (self._options.timeoutInSeconds || 30) * 1000;\r\n                const abortController = new AbortController();\r\n                const timeoutId = setTimeout(() => abortController.abort(), timeout);\r\n\r\n                this._logger.log({\r\n                    message: '[Request] HttpClient',\r\n                    content: {\r\n                        request,\r\n                        attempt,\r\n                        maxAttempts\r\n                    },\r\n                    method: \"send\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const response = await fetch(request.url, {\r\n                    headers: {\r\n                        ...request.headers,\r\n                        'x-attempt': attempt.toString(),\r\n                        'x-max-attempts': maxAttempts.toString(),\r\n                        'accept': 'application/json',\r\n                        'content-type': 'application/json',\r\n                    },\r\n                    keepalive: true,\r\n                    body: JSON.stringify(request.body),\r\n                    method: request.method,\r\n                    signal: abortController.signal\r\n                });\r\n\r\n                this._logger.log({\r\n                    message: '[Response] HttpClient',\r\n                    content: {\r\n                        response,\r\n                        attempt,\r\n                        maxAttempts\r\n                    },\r\n                    method: \"send\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                clearTimeout(timeoutId);\r\n                const result = await response.json();\r\n                return {\r\n                    isSuccess: response.ok,\r\n                    isTransientError: this.isTransientError(response),\r\n                    data: response.ok ? result.data : result\r\n                };\r\n            },\r\n            method: `[${request.method}] ${request.url}`,\r\n            correlationId: request.correlationId\r\n        });\r\n    }\r\n\r\n    isTransientError(response: Response): boolean {\r\n        const TRANSIENT_STATUS = [409, 424, 500, 503, 504];\r\n\r\n        return TRANSIENT_STATUS.includes(response.status);\r\n    }\r\n}","import { ILog, ILogger } from \"./abstractions\";\r\n\r\nexport class ConsoleLogger implements ILogger {\r\n    flush(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n    \r\n    log(log: ILog): void {\r\n        console.log(JSON.stringify(log));\r\n    }\r\n\r\n}","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { LinearRetryPolicy } from \"../httpClients/retryPolicies\";\r\nimport { IElasticLoggerOptions, ILog, ILogger, LogLevel } from \"./abstractions\";\r\nimport { ConsoleLogger } from \"./ConsoleLogger\";\r\n\r\ninterface IFullLog {\r\n    service: {\r\n        name: string;\r\n        version: string\r\n    },\r\n    executionDate: Date,\r\n    entrypoint: string;\r\n    method: string;\r\n    correlationId: string;\r\n    level: LogLevel;\r\n    customMessage: string;\r\n    message: string;\r\n    content?: object;\r\n    exeption?: object;\r\n}\r\n\r\nexport class ElasticLogger implements ILogger {\r\n    private static readonly DEFAULT_BATCH_TIMEOUT = 5;\r\n    private readonly _httpClient: IHttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IElasticLoggerOptions;\r\n    private _logs: Array<IFullLog> = [];\r\n    private _interval: NodeJS.Timer;\r\n\r\n    constructor(options: IElasticLoggerOptions,\r\n        logger: ILogger = new ConsoleLogger(),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger, new LinearRetryPolicy({\r\n            maxAttempts: 3,\r\n            attemptDelay: 5000\r\n        }, logger))) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n        this._httpClient = httpClient;\r\n        this._interval = setInterval(this.sendBatch.bind(this), (this._options.batchLogIntervalInSeconds || ElasticLogger.DEFAULT_BATCH_TIMEOUT) * 1000);\r\n    }\r\n\r\n    log(log: ILog): void {\r\n        this._logger.log(log);\r\n\r\n        if (!this._options.elasticLoggerUrl)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._logs.push({\r\n            customMessage: log.message,\r\n            message: `[FRONTEND] ${log.message}`,\r\n            service: {\r\n                name: 'ThreeDSecure.Service.JS',\r\n                version: '3.0.0'\r\n            },\r\n            executionDate: new Date(),\r\n            entrypoint: 'Execute',\r\n            method: log.method,\r\n            correlationId: log.correlationId,\r\n            content: log.content,\r\n            level: log.level\r\n        });\r\n    }\r\n\r\n    async flush(): Promise<void> {\r\n        clearInterval(this._interval);\r\n        while (this._logs.length) {\r\n            await this.sendBatch();\r\n        }\r\n        this._interval = setInterval(this.sendBatch.bind(this), (this._options.batchLogIntervalInSeconds || ElasticLogger.DEFAULT_BATCH_TIMEOUT) * 1000);\r\n    }\r\n\r\n    async sendBatch() : Promise<void> {\r\n        const logs = this._logs.splice(0, 10);\r\n        if (!logs.length) {\r\n            return;\r\n        }\r\n        const correlationId = logs.map(x => x.correlationId)[0];\r\n        try {\r\n            await this._httpClient.send<void>({\r\n                url: this._options.elasticLoggerUrl,\r\n                method: 'POST',\r\n                body: logs,\r\n                correlationId,\r\n                headers: {\r\n                    'x-api-key': this._options.apiKey\r\n                }\r\n            });\r\n        } catch (error) {\r\n            this._logger.log({\r\n                error: error,\r\n                message: 'Error sending message to elastic',\r\n                method: 'sendBatch',\r\n                correlationId,\r\n                level: LogLevel.Error\r\n            });\r\n        }\r\n    }\r\n}","export enum ChallengeWindowSize {\r\n    width250xheight400 = '01',\r\n    width390xheight400 = '02',\r\n    width500xheight600 = '03',\r\n    width600xheight400 = '04',\r\n    fullscreen = '05'\r\n}\r\n","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { ChallengeWindowSize, IChallengeExecute, IChallengeOptions, IChallengeService } from \"./abstractions\";\r\n\r\nexport class IFrameChallengeService implements IChallengeService {\r\n    private static readonly IFRAME_NAME = 'challengeIframe';\r\n    private static readonly FORM_NAME = 'challengeForm';\r\n    private static readonly CREQ_INPUT_NAME = 'creq';\r\n    private static readonly CREQ_INPUT_TYPE = 'hidden';\r\n\r\n    private readonly _options: IChallengeOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IChallengeOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n\r\n    execute(request: IChallengeExecute): Promise<void> {\r\n        if (!request.authResponse.challengeUrl) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: '[Request] Challenge execution',\r\n                    content: {\r\n                        authResponse: request.authResponse\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                 HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.IFRAME_NAME,\r\n                    isVisible: true,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn\r\n                });\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.FORM_NAME,\r\n                    actionUrl: request.authResponse.challengeUrl,\r\n                    target: IFrameChallengeService.IFRAME_NAME,\r\n                    method: 'post'\r\n                });\r\n\r\n                const threeDSRequestInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameChallengeService.CREQ_INPUT_NAME,\r\n                    type: IFrameChallengeService.CREQ_INPUT_TYPE\r\n                });\r\n\r\n                const cReq = {\r\n                    threeDSServerTransID: request.authResponse.processId,\r\n                    acsTransID: request.authResponse.challengeId,\r\n                    messageVersion: request.authResponse.challengeVersion,\r\n                    messageType: \"CReq\",\r\n                    challengeWindowSize: this._options.challengeWindowSize || ChallengeWindowSize.width250xheight400\r\n                };\r\n\r\n                const base64CReq = Base64Converter.convert(cReq)\r\n                threeDSRequestInput.value = base64CReq;\r\n\r\n                form.submit();\r\n\r\n                this._logger.log({\r\n                    message: '[Response] Challenge execution',\r\n                    content: {\r\n                        authResponse: request.authResponse,\r\n                        cReq,\r\n                        base64CReq\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: '[Error] Challenge execution',\r\n                    content: {\r\n                        authResponse: request.authResponse,\r\n                        error\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Error\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { IDirectoryServerExecute, IDirectoryServerOptions, IDirectoryServerService } from \"./abstractions\";\r\n\r\nexport class IFrameDirectoryServerService implements IDirectoryServerService {\r\n    private static readonly IFRAME_NAME: string = 'threeDSMethodIframe';\r\n    private static readonly FORM_NAME: string = 'threeDSMethodForm';\r\n    private static readonly FORM_INPUT_NAME: string = 'threeDSMethodData';\r\n    private static readonly FROM_INPUT_TYPE: string = 'hidden';\r\n\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IDirectoryServerOptions;\r\n\r\n    constructor(options: IDirectoryServerOptions, logger: ILogger) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n\r\n    execute(request: IDirectoryServerExecute) : Promise<void> {\r\n        if (!request.preAuthResponse.dsMethodUrl) {\r\n            return Promise.resolve();\r\n        }        \r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: '[Request] DirectoryServer execution',\r\n                    content: request,\r\n                    method: \"directoryServerExecute\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const iframe = HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    isVisible: false,\r\n                    name: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn\r\n                });\r\n                this._options.onIFrameCreatedFn?.call(this._options, iframe);\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameDirectoryServerService.FORM_NAME,\r\n                    actionUrl: request.preAuthResponse.dsMethodUrl,\r\n                    target: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    method: 'POST'\r\n                });\r\n\r\n                const threeDSMethodDataInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameDirectoryServerService.FORM_INPUT_NAME,\r\n                    type: IFrameDirectoryServerService.FROM_INPUT_TYPE\r\n                });\r\n\r\n                const threeDSMethodData = {\r\n                    threeDSServerTransID: request.preAuthResponse.processId,\r\n                    threeDSMethodNotificationURL: request.preAuthResponse.notificationUrl\r\n                };\r\n\r\n                const threeDSMethodDataBase64 = Base64Converter.convert(threeDSMethodData)\r\n                threeDSMethodDataInput.value = threeDSMethodDataBase64;\r\n\r\n                form.submit();\r\n\r\n                this._logger.log({\r\n                    message: '[Response] DirectoryServer execution',\r\n                    content: {\r\n                        request,\r\n                        threeDSMethodDataBase64\r\n                    },\r\n                    method: \"directoryServerExecute\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: '[Error] DirectoryServer execution',\r\n                    content: {\r\n                        request,\r\n                        error\r\n                    },\r\n                    method: \"directoryServerExecute\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Error\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n}","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { ElasticLogger } from \"../loggers\";\r\nimport { Browser } from \"../shared/utils\";\r\nimport { IAuthResponse, IChallengeService, IDirectoryServerService, IExecuteRequest, IPostAuthResponse, IThreeDSecureOptions, IThreeDSecureService } from \"./abstractions\";\r\nimport { IPreAuthResponse } from \"./abstractions/IPreAuthResponse\";\r\nimport { IFrameChallengeService } from \"./IFrameChallengeService\";\r\nimport { IFrameDirectoryServerService } from \"./IFrameDirectoryServerService\";\r\n\r\n export class ThreeDSecureService implements IThreeDSecureService {\r\n    private readonly _options: IThreeDSecureOptions;\r\n    private readonly _logger: ILogger;\r\n    private readonly _client: IHttpClient;\r\n    private readonly _directoryServer: IDirectoryServerService;\r\n    private readonly _challenge: IChallengeService;\r\n\r\n    constructor(\r\n        options: IThreeDSecureOptions,\r\n        logger: ILogger = new ElasticLogger(options),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger),\r\n        directoryServer: IDirectoryServerService = new IFrameDirectoryServerService(options, logger),\r\n        challenge: IChallengeService = new IFrameChallengeService(options, logger)) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n        this._client = httpClient;\r\n        this._directoryServer = directoryServer;\r\n        this._challenge = challenge;\r\n    }\r\n\r\n     async execute(request: IExecuteRequest): Promise<IPostAuthResponse> {\r\n        let preAuthResponse = await this._preAuth(request);\r\n        await this._directoryServer.execute({\r\n            preAuthResponse,\r\n            correlationId: request.correlationId\r\n        });\r\n        let authResponse = await this._auth(request);\r\n        await this._challenge.execute({\r\n            authResponse,\r\n            correlationId: request.correlationId\r\n        });\r\n        let postAuthResponse = await this._postAuth(request);\r\n        await this._logger.flush();\r\n        return postAuthResponse;\r\n     }\r\n\r\n     _preAuth(request: IExecuteRequest): Promise<IPreAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing PreAuth',\r\n            content: request,\r\n            method: \"_preAuth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        return this._client.send<IPreAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/preAuth`,\r\n            method: 'POST',\r\n            body: {\r\n                browser: Browser.create()\r\n            },\r\n            correlationId: request.correlationId,\r\n            headers: {\r\n                'x-api-key': this._options.apiKey\r\n            }\r\n        });\r\n     }\r\n\r\n     _auth(request: IExecuteRequest): Promise<IAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing Auth',\r\n            content: request,\r\n            method: \"_auth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        return this._client.send<IAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v1/${request.id}/auth`,\r\n            method: 'POST',\r\n            correlationId: request.correlationId,\r\n            headers: {\r\n                'x-api-key': this._options.apiKey\r\n            }\r\n        });\r\n     }\r\n\r\n     _postAuth(request: IExecuteRequest): Promise<IPostAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing PostAuth',\r\n            content: request,\r\n            method: \"_postAuth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        return this._client.send<IPostAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/postAuth`,\r\n            method: 'POST',\r\n            correlationId: request.correlationId,\r\n            headers: {\r\n                'x-api-key': this._options.apiKey\r\n            }\r\n        });\r\n     }\r\n }\r\n\r\n "],"names":["LogLevel","Base64Converter","static","data","json","JSON","stringify","btoa","replace","Browser","colorDepth","find","x","screen","javaEnabled","navigator","javascriptEnabled","language","userAgent","screenWidth","window","width","screenHeight","height","timezoneOffset","Date","getTimezoneOffset","acceptHeader","Delay","constructor","delay","_task","_timeout","this","Promise","resolve","setTimeout","wait","cancel","clearTimeout","reject","message","id","HtmlElementFactory","createIFrame","_createIFrame$parent","iframe","document","createElement","name","useDefaultStyle","setAttribute","isVisible","style","opacity","parent","appendChild","createForm","form","action","actionUrl","target","method","createInput","input","type","LinearRetryPolicy","options","logger","_options","_logger","execute","executeFn","correlationId","_this","async","_lastError","attempt","lastError","result","maxAttempts","isSuccess","isTransientError","error","additionalData","log","content","level","Warning","sleep","attemptDelay","Error","FetchHttpClient","retryPolicy","_retryPolicy","request","self","timeout","timeoutInSeconds","abortController","AbortController","timeoutId","abort","Information","response","fetch","url","headers","_extends","toString","accept","keepalive","body","signal","ok","includes","status","ConsoleLogger","flush","console","ElasticLogger","httpClient","_httpClient","_logs","_interval","setInterval","sendBatch","bind","batchLogIntervalInSeconds","DEFAULT_BATCH_TIMEOUT","elasticLoggerUrl","push","customMessage","service","version","executionDate","entrypoint","clearInterval","length","logs","splice","map","send","apiKey","ChallengeWindowSize","IFrameChallengeService","authResponse","challengeUrl","container","IFRAME_NAME","onIFrameCreatedFn","FORM_NAME","threeDSRequestInput","CREQ_INPUT_NAME","CREQ_INPUT_TYPE","cReq","threeDSServerTransID","processId","acsTransID","challengeId","messageVersion","challengeVersion","messageType","challengeWindowSize","width250xheight400","base64CReq","convert","value","submit","IFrameDirectoryServerService","preAuthResponse","dsMethodUrl","_this$_options$onIFra","call","threeDSMethodDataInput","FORM_INPUT_NAME","FROM_INPUT_TYPE","threeDSMethodDataBase64","threeDSMethodNotificationURL","notificationUrl","ThreeDSecureService","directoryServer","challenge","_client","_directoryServer","_challenge","_preAuth","_auth","postAuthResponse","_postAuth","threeDSecureUrl","browser","create"],"mappings":"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"}