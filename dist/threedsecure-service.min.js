function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ThreeDSecureService = /*#__PURE__*/function () {
  function ThreeDSecureService(_ref) {
    var threeDSecureUrl = _ref.threeDSecureUrl,
        container = _ref.container,
        maxAttempts = _ref.maxAttempts,
        attemptDelay = _ref.attemptDelay,
        culture = _ref.culture,
        onProgressFn = _ref.onProgressFn,
        onIFrameCreatedFn = _ref.onIFrameCreatedFn,
        onContainerCreatedFn = _ref.onContainerCreatedFn;

    _classCallCheck(this, ThreeDSecureService);

    this._onProgressFn = onProgressFn;
    this._maxAttempts = maxAttempts || 50;
    this._attemptDelay = attemptDelay || 2000;
    this._threeDSecureUrl = threeDSecureUrl || 'https://threedsecure.paybyrd.com';
    this._culture = culture || 'en-US';
    this._container = container || document.body;
    this._onIFrameCreatedFn = onIFrameCreatedFn;
    this._onContainerCreatedFn = onContainerCreatedFn;
    this.IFRAME_DSMETHOD_NAME = 'threeDSMethodIframe';
    this.FORM_DSMETHOD_NAME = 'threeDSMethodForm';
    this.IFRAME_CHALLENGE_NAME = 'challengeIframe';
    this.FORM_CHALLENGE_NAME = 'challengeForm';

    this._fixContainer();
  }

  _createClass(ThreeDSecureService, [{
    key: "createAndExecute",
    value: function createAndExecute(initiatePayment) {
      var _this = this;

      var correlationId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : crypto.randomUUID();
      return this.create(initiatePayment, correlationId).then(function (createResponse) {
        return _this.preAuth(createResponse, correlationId);
      }).then(function (preAuthResponse) {
        return _this.auth(preAuthResponse, correlationId);
      }).then(function (authResponse) {
        return _this.postAuth(authResponse, correlationId);
      }).then(function (postAuthResponse) {
        return _objectSpread(_objectSpread({}, postAuthResponse), {}, {
          correlationId: correlationId
        });
      })["catch"](function (error) {
        _this._onProgress({
          type: 'event:error',
          error: error
        });

        return Promise.reject(_objectSpread(_objectSpread({}, error), {}, {
          correlationId: correlationId
        }));
      })["finally"](this._destroy.bind(this));
    }
  }, {
    key: "execute",
    value: function execute(createResponse) {
      var _this2 = this;

      var correlationId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : crypto.randomUUID();
      return this.preAuthV2(createResponse, correlationId).then(function (preAuthResponse) {
        return _this2.auth(preAuthResponse, correlationId);
      }).then(function (authResponse) {
        return _this2.postAuthV2(authResponse, correlationId);
      }).then(function (postAuthResponse) {
        return _objectSpread(_objectSpread({}, postAuthResponse), {}, {
          correlationId: correlationId
        });
      })["catch"](function (error) {
        _this2._onProgress({
          type: 'event:error',
          error: error
        });

        return _this2.postAuthV2(_objectSpread({}, createResponse), correlationId)["catch"](function (error) {
          _this2._onProgress({
            type: 'event:error',
            error: error
          });

          return Promise.reject(_objectSpread(_objectSpread({}, error), {}, {
            correlationId: correlationId
          }));
        });
      })["finally"](this._destroy.bind(this));
    }
  }, {
    key: "create",
    value: function create(initiatePayment, correlationId) {
      var _this3 = this;

      return this._retry(this._isTransientStatusCode.bind(this), function () {
        return _this3._sendRequest({
          path: '/api/v1',
          method: 'POST',
          payload: _objectSpread(_objectSpread({}, initiatePayment), {}, {
            browser: _this3._getBrowserData()
          }),
          correlationId: correlationId
        });
      }, 'event:create');
    }
  }, {
    key: "preAuthV2",
    value: function preAuthV2(preAuthRequest, correlationId) {
      var _this4 = this;

      return this._retry(this._isTransientStatusCode.bind(this), function () {
        return _this4._sendRequest({
          path: "/api/v2/".concat(preAuthRequest.id, "/preauth"),
          payload: {
            browser: _this4._getBrowserData()
          },
          method: 'POST',
          correlationId: correlationId
        });
      }, 'event:preAuth').then(function (preAuthResponse) {
        if (!preAuthResponse.isDsMethodRequired) {
          return preAuthResponse;
        }

        return _this4._executeDsMethod(preAuthResponse).then(function () {
          return preAuthResponse;
        });
      });
    }
  }, {
    key: "preAuth",
    value: function preAuth(preAuthRequest, correlationId) {
      var _this5 = this;

      return this._retry(this._isTransientStatusCode.bind(this), function () {
        return _this5._sendRequest({
          path: "/api/v1/".concat(preAuthRequest.id, "/preauth"),
          method: 'POST',
          correlationId: correlationId
        });
      }, 'event:preAuth').then(function (preAuthResponse) {
        if (!preAuthResponse.isDsMethodRequired) {
          return preAuthResponse;
        }

        return _this5._executeDsMethod(preAuthResponse).then(function () {
          return preAuthResponse;
        });
      });
    }
  }, {
    key: "auth",
    value: function auth(authRequest, correlationId) {
      var _this6 = this;

      return this._retry(this._isTransientStatusCode.bind(this), function () {
        return _this6._sendRequest({
          path: "/api/v1/".concat(authRequest.id, "/auth"),
          method: 'POST',
          correlationId: correlationId
        });
      }, 'event:auth').then(function (authResponse) {
        if (!authResponse.isChallengeRequired) {
          return authResponse;
        }

        return (authResponse.challengeVersion === '1.0.0' ? _this6._executeChallengeV1(authResponse) : _this6._executeChallengeV2(authResponse)).then(function () {
          return authResponse;
        });
      });
    }
  }, {
    key: "postAuth",
    value: function postAuth(postAuthRequest, correlationId) {
      var _this7 = this;

      return this._retry(this._isTransientStatusCode.bind(this), function () {
        return _this7._sendRequest({
          path: "/api/v1/".concat(postAuthRequest.id, "/postAuth"),
          method: 'POST',
          correlationId: correlationId
        });
      }, 'event:postAuth');
    }
  }, {
    key: "postAuthV2",
    value: function postAuthV2(postAuthRequest, correlationId) {
      var _this8 = this;

      return this._retry(this._isTransientStatusCode.bind(this), function () {
        return _this8._sendRequest({
          path: "/api/v2/".concat(postAuthRequest.id, "/postAuth"),
          method: 'POST',
          correlationId: correlationId
        });
      }, 'event:postAuth').then(function (postAuthResponse) {
        if (postAuthResponse.status !== 'Authorized') {
          _this8._onProgress({
            type: 'event:error',
            error: postAuthResponse
          });
        }

        return postAuthResponse;
      });
    }
  }, {
    key: "_executeDsMethod",
    value: function _executeDsMethod(preAuthResponse) {
      var _this9 = this;

      return new Promise(function (resolve, reject) {
        try {
          _this9._onProgress({
            type: 'event:dsMethod:start'
          });

          var iframeName = _this9.IFRAME_DSMETHOD_NAME;
          var formName = _this9.FORM_DSMETHOD_NAME;
          var inputName = 'threeDSMethodData';
          var inputType = 'hidden';

          _this9._createIFrame(iframeName, false);

          var form = _this9._createForm(formName, preAuthResponse.dsMethodUrl, iframeName);

          var threeDSMethodDataInput = _this9._createInput(form, inputName, inputType);

          var threeDSMethodData = {
            threeDSServerTransID: preAuthResponse.processId,
            threeDSMethodNotificationURL: preAuthResponse.notificationUrl
          };
          threeDSMethodDataInput.value = _this9._convertToBase64UriJson(threeDSMethodData);
          form.submit();

          _this9._onProgress({
            type: 'event:dsMethod:success'
          });

          resolve();
        } catch (error) {
          _this9._onProgress({
            type: 'event:dsMethod:fail'
          });

          return reject({
            message: error.toString()
          });
        }
      });
    }
  }, {
    key: "_executeChallengeV1",
    value: function _executeChallengeV1(authResponse) {
      var _this10 = this;

      return new Promise(function (resolve, reject) {
        try {
          _this10._onProgress({
            type: 'event:challenge:v1:start'
          });

          var iframeName = _this10.IFRAME_CHALLENGE_NAME;
          var formName = _this10.FORM_CHALLENGE_NAME;
          var paReqInputName = 'PaReq';
          var termUrlInputName = 'TermUrl';
          var inputType = 'hidden';

          _this10._createIFrame(iframeName);

          var form = _this10._createForm(formName, authResponse.challengeUrl, iframeName, 'post');

          var paReqInput = _this10._createInput(form, paReqInputName, inputType);

          var termUrlInput = _this10._createInput(form, termUrlInputName, inputType);

          paReqInput.value = authResponse.preAuthRequest;
          termUrlInput.value = authResponse.notificationUrl;
          form.submit();
          resolve();

          _this10._onProgress({
            type: 'event:challenge:v1:success'
          });
        } catch (error) {
          _this10._onProgress({
            type: 'event:challenge:v1:fail',
            error: error
          });

          return reject({
            message: error.toString()
          });
        }
      });
    }
  }, {
    key: "_executeChallengeV2",
    value: function _executeChallengeV2(authResponse) {
      var _this11 = this;

      return new Promise(function (resolve, reject) {
        try {
          _this11._onProgress({
            type: 'event:challenge:v2:start'
          });

          var iframeName = _this11.IFRAME_CHALLENGE_NAME;
          var formName = _this11.FORM_CHALLENGE_NAME;
          var threeDSSessionDataInputName = 'threeDSSessionData';
          var threeDSRequestInputName = 'creq';
          var inputType = 'hidden';

          _this11._createIFrame(iframeName);

          var form = _this11._createForm(formName, authResponse.challengeUrl, iframeName, 'post');

          _this11._createInput(form, threeDSSessionDataInputName, inputType);

          var threeDSRequestInput = _this11._createInput(form, threeDSRequestInputName, inputType);

          var cReq = {
            threeDSServerTransID: authResponse.processId,
            acsTransID: authResponse.challengeId,
            messageVersion: authResponse.challengeVersion,
            messageType: "CReq",
            challengeWindowSize: "01"
          };
          threeDSRequestInput.value = _this11._convertToBase64UriJson(cReq);
          form.submit();
          resolve();

          _this11._onProgress({
            type: 'event:challenge:v2:success'
          });
        } catch (error) {
          _this11._onProgress({
            type: 'event:challenge:v2:fail',
            error: error
          });

          return reject({
            message: error.toString()
          });
        }
      });
    }
  }, {
    key: "_delay",
    value: function _delay(timeout) {
      var _this12 = this;

      this._onProgress({
        type: 'event:delay:start',
        data: {
          timeout: timeout
        }
      });

      return new Promise(function (resolve, _) {
        setTimeout(function () {
          _this12._onProgress({
            type: 'event:delay:end',
            data: {
              timeout: timeout
            }
          });

          resolve();
        }, timeout);
      });
    }
  }, {
    key: "_fixContainer",
    value: function _fixContainer() {
      if (this._onContainerCreatedFn) {
        this._onContainerCreatedFn(this._container);

        return;
      }

      this._container.setAttribute('style', 'position: relative; overflow: hidden;');
    }
  }, {
    key: "_createForm",
    value: function _createForm(name, action, target) {
      var method = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'POST';
      var form = document.createElement('form');
      form.id = name;
      form.name = name;
      form.action = action;
      form.target = target;
      form.method = method;

      this._container.appendChild(form);

      return form;
    }
  }, {
    key: "_createInput",
    value: function _createInput(form, name, type) {
      var input = document.createElement('input');
      input.id = name;
      input.name = name;
      input.type = type;
      form.appendChild(input);
      return input;
    }
  }, {
    key: "_createIFrame",
    value: function _createIFrame(name) {
      var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var iframe = document.createElement('iframe');
      iframe.id = name;
      iframe.name = name;

      if (this._onIFrameCreatedFn) {
        this._onIFrameCreatedFn(iframe);

        iframe.style.opacity = visible ? 1 : 0;
      } else {
        iframe.setAttribute('style', "border: none;position: absolute; top: 0; left: 0; bottom: 0; right: 0; width: 100%; height: 100%;opacity: ".concat(visible ? '1' : '0'));
      }

      this._container.appendChild(iframe);

      return iframe;
    }
  }, {
    key: "_getBrowserData",
    value: function _getBrowserData() {
      var allowedBrowserColorDepth = [48, 32, 24, 16, 15, 8, 4, 1];
      var colorDepth = allowedBrowserColorDepth.find(function (x) {
        return x <= screen.colorDepth;
      });
      return {
        javaEnabled: navigator.javaEnabled(),
        javascriptEnabled: true,
        language: navigator.language,
        userAgent: navigator.userAgent,
        screenWidth: window.screen.width,
        screenHeight: window.screen.height,
        timezoneOffset: new Date().getTimezoneOffset(),
        colorDepth: colorDepth,
        acceptHeader: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'
      };
    }
  }, {
    key: "_retry",
    value: function _retry(conditionFn, executeFn, eventType) {
      var _this13 = this;

      return new Promise( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
          var _response$data, _response$data$error, _response$data2;

          var response, attempts, _error$data;

          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  response = null;
                  attempts = _this13._maxAttempts;

                case 2:
                  _this13._onProgress({
                    type: "".concat(eventType, ":start"),
                    data: {
                      attempt: _this13._maxAttempts - attempts + 1
                    }
                  });

                  _context.prev = 3;
                  _context.next = 6;
                  return executeFn();

                case 6:
                  response = _context.sent;
                  _context.next = 13;
                  break;

                case 9:
                  _context.prev = 9;
                  _context.t0 = _context["catch"](3);

                  _this13._onProgress({
                    type: "".concat(eventType, ":error"),
                    error: (_error$data = _context.t0.data) === null || _error$data === void 0 ? void 0 : _error$data.error,
                    data: {
                      statusCode: _context.t0.status
                    }
                  });

                  response = _context.t0;

                case 13:
                  if (!(response.status >= 200 && response.status < 300)) {
                    _context.next = 17;
                    break;
                  }

                  _this13._onProgress({
                    type: "".concat(eventType, ":success"),
                    data: response.data.data
                  });

                  resolve(response.data.data);
                  return _context.abrupt("return");

                case 17:
                  attempts--;
                  _context.next = 20;
                  return _this13._delay(_this13._attemptDelay);

                case 20:
                  if (attempts > 0 && conditionFn(response)) {
                    _context.next = 2;
                    break;
                  }

                case 21:
                  _this13._onProgress({
                    type: "".concat(eventType, ":fail"),
                    error: (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.error
                  });

                  reject((_response$data$error = (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.error) !== null && _response$data$error !== void 0 ? _response$data$error : {
                    message: 'Unhandled error'
                  });

                case 23:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[3, 9]]);
        }));

        return function (_x, _x2) {
          return _ref2.apply(this, arguments);
        };
      }());
    }
  }, {
    key: "_onProgress",
    value: function _onProgress(event) {
      var _this14 = this;

      this._safeExecute(function () {
        var _this14$_onProgressFn;

        return (_this14$_onProgressFn = _this14._onProgressFn) === null || _this14$_onProgressFn === void 0 ? void 0 : _this14$_onProgressFn.call(null, event);
      });
    }
  }, {
    key: "_isTransientStatusCode",
    value: function _isTransientStatusCode(response) {
      return this._safeExecute(function () {
        return response.status === 409 || response.status === 424 || response.status == 500 || response.status == 503 || response.status === 504;
      }, true);
    }
  }, {
    key: "_convertToBase64UriJson",
    value: function _convertToBase64UriJson(data) {
      var json = JSON.stringify(data);
      var base64Json = btoa(json);
      var encodedBase64Json = base64Json.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
      return encodedBase64Json;
    }
  }, {
    key: "_sendRequest",
    value: function _sendRequest(_ref3) {
      var _this15 = this;

      var path = _ref3.path,
          method = _ref3.method,
          payload = _ref3.payload,
          correlationId = _ref3.correlationId;

      var tryParse = function tryParse(json) {
        if (json === '') {
          return null;
        }

        return _this15._safeExecute(function () {
          return JSON.parse(json);
        }, null);
      };

      return new Promise(function (resolve, reject) {
        var xhr = new XMLHttpRequest();
        var url = new URL(path, _this15._threeDSecureUrl);
        xhr.open(method, url.toString());
        var TIMEOUT_IN_MILLISECONDS = 30000;
        xhr.timeout = TIMEOUT_IN_MILLISECONDS;
        xhr.setRequestHeader("Accept", "application/json");
        xhr.setRequestHeader("Accept-Language", _this15._culture);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.setRequestHeader("CorrelationId", correlationId);

        xhr.onload = function () {
          try {
            if (xhr.status >= 200 && xhr.status < 300) {
              resolve({
                status: xhr.status,
                data: tryParse(xhr.responseText)
              });
              return;
            }

            reject({
              status: xhr.status,
              data: tryParse(xhr.responseText)
            });
          } catch (error) {
            console.log(error);
            reject({
              status: 500,
              data: {
                message: error.toString()
              }
            });
          }
        };

        xhr.onerror = function () {
          try {
            reject({
              status: xhr.status,
              data: tryParse(xhr.responseText)
            });
          } catch (error) {
            reject({
              status: 500,
              data: {
                message: error.toString()
              }
            });
          }
        };

        xhr.ontimeout = function () {
          reject({
            status: 503,
            data: {
              message: 'Service timeout'
            }
          });
        };

        var json = _this15._safeExecute(function () {
          return JSON.stringify(payload);
        }, '{}');

        xhr.send(json);
      });
    }
  }, {
    key: "_destroy",
    value: function _destroy() {
      var _this16 = this;

      this._safeExecute(function () {
        var _document$getElementB;

        return (_document$getElementB = document.getElementById(_this16.IFRAME_DSMETHOD_NAME)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.remove();
      });

      this._safeExecute(function () {
        var _document$getElementB2;

        return (_document$getElementB2 = document.getElementById(_this16.FORM_DSMETHOD_NAME)) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.remove();
      });

      this._safeExecute(function () {
        var _document$getElementB3;

        return (_document$getElementB3 = document.getElementById(_this16.IFRAME_CHALLENGE_NAME)) === null || _document$getElementB3 === void 0 ? void 0 : _document$getElementB3.remove();
      });

      this._safeExecute(function () {
        var _document$getElementB4;

        return (_document$getElementB4 = document.getElementById(_this16.FORM_CHALLENGE_NAME)) === null || _document$getElementB4 === void 0 ? void 0 : _document$getElementB4.remove();
      });
    }
  }, {
    key: "_safeExecute",
    value: function _safeExecute(action, defaultResult) {
      try {
        return action();
      } catch (error) {
        console.log(error);
        return defaultResult;
      }
    }
  }]);

  return ThreeDSecureService;
}();

export { ThreeDSecureService as default };