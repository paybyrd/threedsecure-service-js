{"version":3,"file":"index.modern.mjs","sources":["../src/loggers/abstractions/LogLevel.ts","../src/shared/utils/Stopwatch.ts","../src/shared/utils/Base64Converter.ts","../src/shared/utils/Browser.ts","../src/shared/utils/Delay.ts","../src/shared/utils/HtmlElementFactory.ts","../src/httpClients/retryPolicies/LinearRetryPolicy.ts","../src/httpClients/FetchHttpClient.ts","../src/loggers/ConsoleLogger.ts","../src/loggers/RestLogger.ts","../src/services/abstractions/ChallengeWindowSize.ts","../src/services/IFrameChallengeService.ts","../src/services/IFrameDirectoryServerService.ts","../src/services/ThreeDSecureService.ts"],"sourcesContent":["export enum LogLevel {\r\n    Trace = 0,\r\n    Debug = 1,\r\n    Information = 2,\r\n    Warning = 3,\r\n    Error = 4,\r\n    Critical = 5,\r\n    None = 6\r\n}\r\n","export class Stopwatch {\r\n    private start: number;\r\n    private end: number;\r\n\r\n    constructor() {\r\n        this.start = Date.now();\r\n    }\r\n    \r\n    stop() {\r\n        this.end = Date.now();\r\n    }\r\n\r\n    get elapsed() {\r\n        return (this.end || Date.now()) - this.start;\r\n    }\r\n}","export class Base64Converter {\r\n    static convert(data: object) {\r\n        const json = JSON.stringify(data);\r\n        const base64Json = btoa(json);\r\n        return base64Json\r\n            .replace(/=/g, '')\r\n            .replace(/\\+/g, '-')\r\n            .replace(/\\//g, '_');\r\n    }\r\n}","import { IBrowser } from \"../abstractions\";\r\n\r\nexport class Browser {\r\n    static create(): IBrowser {\r\n        const allowedBrowserColorDepth = [48, 32, 24, 16, 15, 8, 4, 1];\r\n        const colorDepth = allowedBrowserColorDepth.find(x => x <= screen.colorDepth)!;\r\n        return {\r\n            javaEnabled: navigator.javaEnabled(),\r\n            javascriptEnabled: true,\r\n            language: navigator.language,\r\n            userAgent: navigator.userAgent,\r\n            screenWidth: window.screen.width,\r\n            screenHeight: window.screen.height,\r\n            timezoneOffset: new Date().getTimezoneOffset(),\r\n            colorDepth,\r\n            acceptHeader: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'\r\n        };\r\n    }\r\n}","import { IDelay } from \"../abstractions\";\r\n\r\nexport class Delay implements IDelay {\r\n    private _task: Promise<void>;\r\n    private _timeout: NodeJS.Timeout;\r\n    \r\n    constructor(delay: number) {\r\n        this._task = new Promise<void>((resolve) => {\r\n            this._timeout = setTimeout(resolve, delay);\r\n        });\r\n    }\r\n\r\n    wait() {\r\n        return this._task;\r\n    }\r\n\r\n    cancel() {\r\n        clearTimeout(this._timeout);\r\n        this._task = Promise.reject({\r\n            message: 'Timer cancelled'\r\n        });\r\n    }\r\n\r\n    static sleep(delay: number): IDelay {\r\n        return new Delay(delay);\r\n    }\r\n\r\n    static cancel(id: number) {\r\n        clearTimeout(id);\r\n    }\r\n}","import { ICreateForm, ICreateIFrame, ICreateInput } from \"./abstractions\";\r\n\r\nexport class HtmlElementFactory {\r\n    static createIFrame(createIFrame: ICreateIFrame) : HTMLIFrameElement {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.id = createIFrame.name;\r\n        iframe.name = createIFrame.name;\r\n\r\n        if (createIFrame.onReadyFn) {\r\n            createIFrame.onReadyFn(iframe, createIFrame.isVisible);\r\n        }\r\n\r\n        if (createIFrame.onCreatedFn) {\r\n            createIFrame.onCreatedFn(iframe);\r\n            iframe.style.opacity = createIFrame.isVisible ? \"1\" : \"0\";\r\n        } else {\r\n            /* ToDo: Fix this\r\n            iframe.setAttribute(\r\n                \"style\",\r\n                `border: none;position: absolute; top: 0; left: 0; bottom: 0; right: 0; width: 100%; height: 100%;opacity: ${\r\n                    createIFrame.isVisible ? \"1\" : \"0\"\r\n                }`\r\n            );\r\n            */\r\n        }\r\n\r\n        createIFrame.parent.appendChild(iframe);\r\n\r\n        return iframe;\r\n    }\r\n\r\n    static createForm(createForm: ICreateForm): HTMLFormElement {\r\n        const form = document.createElement('form');\r\n        form.id = createForm.name;\r\n        form.name = createForm.name;\r\n        form.action = createForm.actionUrl;\r\n        form.target = createForm.target;\r\n        form.method = createForm.method;\r\n        \r\n        createForm.parent.appendChild(form);\r\n\r\n        return form;\r\n    }\r\n\r\n    static createInput(createInput: ICreateInput): HTMLInputElement {\r\n        const input = document.createElement('input');\r\n        input.id = createInput.name;\r\n        input.name = createInput.name;\r\n        input.type = createInput.type;\r\n        \r\n        createInput.parent.appendChild(input);\r\n\r\n        return input;\r\n    }\r\n}","import { ILogger, LogLevel } from \"../../loggers/abstractions\";\r\nimport { IError } from \"../../shared/abstractions\";\r\nimport { Delay } from \"../../shared/utils\";\r\nimport { IRetryExecution, IRetryOptions, IRetryPolicy } from \"../abstractions\";\r\nimport { IResult } from \"../abstractions/IResult\";\r\n\r\nexport class LinearRetryPolicy implements IRetryPolicy {\r\n    private readonly _options: IRetryOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IRetryOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n    \r\n    execute<T>({\r\n        executeFn,\r\n        method,\r\n        correlationId\r\n    }: IRetryExecution<T>) : Promise<IResult<T>> {\r\n        return new Promise<IResult<T>>(async (resolve, reject) => {\r\n            let attempt = 1;\r\n            let lastError: IError | null = null;\r\n            do {\r\n                try {\r\n                    let result = await executeFn({\r\n                        attempt: attempt,\r\n                        maxAttempts: this._options.maxAttempts\r\n                    });\r\n                    if (result.isSuccess) {\r\n                        resolve(result);\r\n                        return;\r\n                    }\r\n                    if (!result.isTransientError) {\r\n                        reject(result);\r\n                        return;\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    lastError = {\r\n                        message: `Unhandled error calling \"${method}\"`,\r\n                        error,\r\n                        additionalData: {\r\n                            attempt,\r\n                            maxAttempts: this._options.maxAttempts\r\n                        }\r\n                    };\r\n\r\n                    this._logger.log({\r\n                        message: `Unhandled error calling \"${method}\"`,\r\n                        error,\r\n                        content: {\r\n                            attempt,\r\n                            maxAttempts: this._options.maxAttempts\r\n                        },\r\n                        method: method,\r\n                        correlationId: correlationId,\r\n                        level: LogLevel.Warning\r\n                    });\r\n                }\r\n                attempt++;\r\n                await Delay.sleep(this._options.attemptDelay).wait();\r\n            } while (attempt <= this._options.maxAttempts);\r\n\r\n            reject(lastError);\r\n\r\n            this._logger.log({\r\n                message: `Unhandled error calling \"${method}\"`,\r\n                error: lastError?.error,\r\n                content: {\r\n                    attempt,\r\n                    maxAttempts: this._options.maxAttempts\r\n                },\r\n                method: method,\r\n                correlationId: correlationId,\r\n                level: LogLevel.Error\r\n            });\r\n        });\r\n    }\r\n}","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { Stopwatch } from \"../shared/utils/Stopwatch\";\r\nimport { IHttpClient, IHttpClientOptions, IRequest, IRetryPolicy } from \"./abstractions\";\r\nimport { IResult } from \"./abstractions/IResult\";\r\nimport { LinearRetryPolicy } from \"./retryPolicies\";\r\n\r\nexport class FetchHttpClient implements IHttpClient {\r\n    private readonly _options: IHttpClientOptions;\r\n    private readonly _retryPolicy: IRetryPolicy;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IHttpClientOptions, logger: ILogger, retryPolicy: IRetryPolicy = new LinearRetryPolicy(options, logger)) {\r\n        this._retryPolicy = retryPolicy;\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n\r\n    async send<T>(request: IRequest): Promise<IResult<T>> {\r\n        const self = this;\r\n        return await this._retryPolicy.execute<T>({\r\n            executeFn: async ({ attempt, maxAttempts }) => {\r\n                const timeout = (self._options.timeoutInSeconds || 30) * 1000;\r\n                const abortController = new AbortController();\r\n                const timeoutId = setTimeout(() => abortController.abort(), timeout);\r\n                const url = new URL(request.url);\r\n                \r\n                this._logger.log({\r\n                    message: `ExternalService - Request (${url.host})`,\r\n                    content: {\r\n                        request,\r\n                        attempt,\r\n                        maxAttempts\r\n                    },\r\n                    method: \"send\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const stopwatch = new Stopwatch();\r\n                let response : Response;\r\n                try\r\n                {\r\n                    response = await fetch(request.url, {\r\n                        headers: {\r\n                            ...request.headers,\r\n                            'x-attempt': attempt.toString(),\r\n                            'x-max-attempts': maxAttempts.toString(),\r\n                            'accept': 'application/json',\r\n                            'content-type': 'application/json',\r\n                            'correlationId': request.correlationId\r\n                        },\r\n                        keepalive: true,\r\n                        body: JSON.stringify(request.body),\r\n                        method: request.method,\r\n                        signal: abortController.signal\r\n                    });\r\n\r\n                    this._logger.log({\r\n                        message: `ExternalService - Response (${url.host}) in ${stopwatch.elapsed}ms`,\r\n                        content: {\r\n                            request,\r\n                            attempt,\r\n                            maxAttempts,\r\n                            response\r\n                        },\r\n                        method: \"send\",\r\n                        correlationId: request.correlationId,\r\n                        level: LogLevel.Error\r\n                    });\r\n                }\r\n                catch (error) {\r\n                    this._logger.log({\r\n                        message: `ExternalService - Error (${url.host}) in ${stopwatch.elapsed}ms`,\r\n                        content: {\r\n                            request,\r\n                            attempt,\r\n                            maxAttempts,\r\n                            error\r\n                        },\r\n                        method: \"send\",\r\n                        correlationId: request.correlationId,\r\n                        level: LogLevel.Error\r\n                    });\r\n                    throw error;\r\n                }\r\n\r\n                clearTimeout(timeoutId);\r\n                const result : IResult<T> = {\r\n                    isSuccess: response.ok,\r\n                    isTransientError: this.isTransientError(response),\r\n                    getData: async () => {\r\n                        const result = await response.json();\r\n                        return result.data as T;\r\n                    }\r\n                };\r\n                return result;\r\n            },\r\n            method: `[${request.method}] ${request.url}`,\r\n            correlationId: request.correlationId\r\n        });\r\n    }\r\n\r\n    isTransientError(response: Response): boolean {\r\n        const TRANSIENT_STATUS = [409, 424, 500, 503, 504];\r\n\r\n        return TRANSIENT_STATUS.includes(response.status);\r\n    }\r\n}","import { ILog, ILogger } from \"./abstractions\";\r\n\r\nexport class ConsoleLogger implements ILogger {\r\n    flush(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n    \r\n    log(log: ILog): void {\r\n        const errorLog = {\r\n            ...log,\r\n            error: log.error?.toString()\r\n        };\r\n        console.log(errorLog);\r\n    }\r\n\r\n}","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { LinearRetryPolicy } from \"../httpClients/retryPolicies\";\r\nimport { IRestLoggerOptions, ILog, ILogger, LogLevel } from \"./abstractions\";\r\nimport { ConsoleLogger } from \"./ConsoleLogger\";\r\n\r\ninterface IFullLog {\r\n    service: {\r\n        name: string;\r\n        version: string\r\n    },\r\n    environment: 'Development' | 'Staging' | 'Production';\r\n    executionDate: Date,\r\n    entrypoint: string;\r\n    method: string;\r\n    correlationId: string;\r\n    level: LogLevel;\r\n    customMessage: string;\r\n    message: string;\r\n    content?: object;\r\n    exeption?: object;\r\n}\r\n\r\nexport class RestLogger implements ILogger {\r\n    private static readonly DEFAULT_BATCH_TIMEOUT = 5;\r\n    private readonly _httpClient: IHttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IRestLoggerOptions;\r\n    private _logs: Array<IFullLog> = [];\r\n    private _interval: any;\r\n\r\n    constructor(options: IRestLoggerOptions,\r\n        logger: ILogger = new ConsoleLogger(),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger, new LinearRetryPolicy({\r\n            maxAttempts: 3,\r\n            attemptDelay: 5000\r\n        }, logger))) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n        this._httpClient = httpClient;\r\n        this._interval = setInterval(this.sendBatch.bind(this), (this._options.batchLogIntervalInSeconds || RestLogger.DEFAULT_BATCH_TIMEOUT) * 1000);\r\n    }\r\n\r\n    log(log: ILog): void {\r\n        this._logger.log(log);\r\n\r\n        if (!this._options.restLoggerUrl)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._logs.unshift({\r\n            customMessage: log.message,\r\n            message: `[Paybyrd.ThreeDSecure.JS] ${log.message}`,\r\n            service: {\r\n                name: 'Paybyrd.ThreeDSecure.JS',\r\n                version: '3.0.0'\r\n            },\r\n            environment: this._options.environment || 'Development',\r\n            executionDate: new Date(),\r\n            entrypoint: 'Execute',\r\n            method: log.method,\r\n            correlationId: log.correlationId,\r\n            content: {\r\n                ...log.content,\r\n                error: log.error?.toString()\r\n            },\r\n            level: log.level\r\n        });\r\n    }\r\n\r\n    async flush(): Promise<void> {\r\n        clearInterval(this._interval);\r\n        while (this._logs.length) {\r\n            await this.sendBatch();\r\n        }\r\n        this._interval = setInterval(this.sendBatch.bind(this), (this._options.batchLogIntervalInSeconds || RestLogger.DEFAULT_BATCH_TIMEOUT) * 1000);\r\n    }\r\n\r\n    async sendBatch() : Promise<void> {\r\n        const logs = this._logs.splice(0, 10);\r\n        if (!logs.length) {\r\n            return;\r\n        }\r\n        const correlationId = logs.map(x => x.correlationId)[0];\r\n        try {\r\n            await this._httpClient.send<void>({\r\n                url: this._options.restLoggerUrl,\r\n                method: 'POST',\r\n                body: logs,\r\n                correlationId\r\n            });\r\n        } catch (error) {\r\n            this._logger.log({\r\n                error: error,\r\n                message: 'Error sending message to elastic',\r\n                method: 'sendBatch',\r\n                correlationId,\r\n                level: LogLevel.Error\r\n            });\r\n        }\r\n    }\r\n}","export enum ChallengeWindowSize {\r\n    width250xheight400 = '01',\r\n    width390xheight400 = '02',\r\n    width500xheight600 = '03',\r\n    width600xheight400 = '04',\r\n    fullscreen = '05'\r\n}\r\n","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { Stopwatch } from \"../shared/utils/Stopwatch\";\r\nimport { ChallengeWindowSize, IChallengeExecute, IChallengeOptions, IChallengeService } from \"./abstractions\";\r\n\r\nexport class IFrameChallengeService implements IChallengeService {\r\n    private static readonly IFRAME_NAME = 'challengeIframe';\r\n    private static readonly FORM_NAME = 'challengeForm';\r\n    private static readonly CREQ_INPUT_NAME = 'creq';\r\n    private static readonly CREQ_INPUT_TYPE = 'hidden';\r\n\r\n    private readonly _options: IChallengeOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IChallengeOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n\r\n    execute(request: IChallengeExecute): Promise<void> {\r\n        if (!request.authResponse.challengeUrl) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: 'Challenge - Start',\r\n                    content: {\r\n                        authResponse: request.authResponse\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                this._options.container.innerHTML = '';\r\n\r\n                const iFrame = HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.IFRAME_NAME,\r\n                    isVisible: true,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn,\r\n                    onCreatedFn: this._options.onIFrameCreatedFn,\r\n                    onReadyFn: this._options.onIFrameReadyFn\r\n                });\r\n\r\n                this._logger.log({\r\n                    message: 'Challenge - Create iFrame',\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.FORM_NAME,\r\n                    actionUrl: request.authResponse.challengeUrl,\r\n                    target: IFrameChallengeService.IFRAME_NAME,\r\n                    method: 'post'\r\n                });\r\n\r\n                this._logger.log({\r\n                    message: 'Challenge - Create form',\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const threeDSRequestInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameChallengeService.CREQ_INPUT_NAME,\r\n                    type: IFrameChallengeService.CREQ_INPUT_TYPE\r\n                });\r\n\r\n                this._logger.log({\r\n                    message: 'Challenge - Create input',\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const cReq = {\r\n                    threeDSServerTransID: request.authResponse.processId,\r\n                    acsTransID: request.authResponse.challengeId,\r\n                    messageVersion: request.authResponse.challengeVersion,\r\n                    messageType: \"CReq\",\r\n                    challengeWindowSize: this._options.challengeWindowSize || ChallengeWindowSize.width250xheight400\r\n                };\r\n\r\n                const base64CReq = Base64Converter.convert(cReq)\r\n                threeDSRequestInput.value = base64CReq;\r\n\r\n                this._logger.log({\r\n                    message: 'Challenge - Prepare cReq',\r\n                    content: {\r\n                        cReq,\r\n                        base64CReq\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const stopwatch = new Stopwatch();\r\n                const checkIFrameLoaded = () => {\r\n                    const iframeDoc = iFrame.contentDocument || iFrame.contentWindow?.document;\r\n\r\n                    if (iframeDoc?.readyState  == 'complete' ) {\r\n                        this._logger.log({\r\n                                message: `Challenge - iFrame loaded in ${stopwatch.elapsed}ms`,\r\n                                content: {\r\n                                    iFrame: iframeDoc.body.innerText\r\n                                },\r\n                                method: \"executeChallenge\",\r\n                                correlationId: request.correlationId,\r\n                                level: LogLevel.Information\r\n                            });\r\n                        \r\n                        return;\r\n                    } \r\n                \r\n                    // If we are here, it is not loaded. Set things up so we check the status again in 250 milliseconds\r\n                    setTimeout(checkIFrameLoaded, 100);\r\n                }\r\n\r\n                form.submit();\r\n                \r\n                setTimeout(checkIFrameLoaded, 100);\r\n\r\n                this._logger.log({\r\n                    message: 'Challenge - Submit form',\r\n                    content: {\r\n                        authResponse: request.authResponse,\r\n                        cReq,\r\n                        base64CReq\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: 'Challenge - error',\r\n                    content: {\r\n                        authResponse: request.authResponse\r\n                    },\r\n                    error: error,\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Error\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { Stopwatch } from \"../shared/utils/Stopwatch\";\r\nimport { IDirectoryServerExecute, IDirectoryServerOptions, IDirectoryServerService } from \"./abstractions\";\r\n\r\nexport class IFrameDirectoryServerService implements IDirectoryServerService {\r\n    private static readonly IFRAME_NAME: string = 'threeDSMethodIframe';\r\n    private static readonly FORM_NAME: string = 'threeDSMethodForm';\r\n    private static readonly FORM_INPUT_NAME: string = 'threeDSMethodData';\r\n    private static readonly FROM_INPUT_TYPE: string = 'hidden';\r\n\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IDirectoryServerOptions;\r\n\r\n    constructor(options: IDirectoryServerOptions, logger: ILogger) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n\r\n    execute(request: IDirectoryServerExecute) : Promise<void> {\r\n        if (!request.preAuthResponse.dsMethodUrl) {\r\n            return Promise.resolve();\r\n        }        \r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: 'DirectoryServer - Start',\r\n                    content: {\r\n                        preAuthResponse: request\r\n                    },\r\n                    method: 'executeDirectoryServer',\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                this._options.container.innerHTML = '';\r\n\r\n                const iFrame = HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    isVisible: false,\r\n                    name: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn\r\n                });\r\n                this._options.onIFrameCreatedFn?.call(this._options, iFrame);\r\n\r\n                this._logger.log({\r\n                    message: 'DirectoryServer - Create iFrame',\r\n                    method: \"executeDirectoryServer\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameDirectoryServerService.FORM_NAME,\r\n                    actionUrl: request.preAuthResponse.dsMethodUrl,\r\n                    target: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    method: 'POST'\r\n                });\r\n\r\n                this._logger.log({\r\n                    message: 'DirectoryServer - Create Form',\r\n                    method: \"executeDirectoryServer\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const threeDSMethodDataInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameDirectoryServerService.FORM_INPUT_NAME,\r\n                    type: IFrameDirectoryServerService.FROM_INPUT_TYPE\r\n                });\r\n\r\n                this._logger.log({\r\n                    message: 'DirectoryServer - Create Input',\r\n                    method: \"executeDirectoryServer\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const threeDSMethodData = {\r\n                    threeDSServerTransID: request.preAuthResponse.processId,\r\n                    threeDSMethodNotificationURL: request.preAuthResponse.notificationUrl\r\n                };\r\n\r\n                const threeDSMethodDataBase64 = Base64Converter.convert(threeDSMethodData)\r\n                threeDSMethodDataInput.value = threeDSMethodDataBase64;\r\n\r\n                this._logger.log({\r\n                    message: 'DirectoryServer - Prepare threeDSMethodData',\r\n                    content: {\r\n                        threeDSMethodData,\r\n                        threeDSMethodDataBase64\r\n                    },\r\n                    method: \"executeDirectoryServer\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const stopwatch = new Stopwatch();\r\n                const checkIFrameLoaded = () => {\r\n                    const iframeDoc = iFrame.contentDocument || iFrame.contentWindow?.document;\r\n\r\n                    if (iframeDoc?.readyState  == 'complete' ) {\r\n                        this._logger.log({\r\n                                message: `DirectoryServer - iFrame loaded in ${stopwatch.elapsed}ms`,\r\n                                content: {\r\n                                    iFrame: iframeDoc.body.innerText\r\n                                },\r\n                                method: \"executeDirectoryServer\",\r\n                                correlationId: request.correlationId,\r\n                                level: LogLevel.Information\r\n                            });\r\n                        \r\n                        return;\r\n                    } \r\n                \r\n                    // If we are here, it is not loaded. Set things up so we check the status again in 250 milliseconds\r\n                    setTimeout(checkIFrameLoaded, 100);\r\n                }\r\n\r\n                form.submit();\r\n\r\n                setTimeout(checkIFrameLoaded, 100);\r\n\r\n                this._logger.log({\r\n                    message: 'DirectoryServer - Submit form',\r\n                    content: {\r\n                        threeDSMethodData,\r\n                        threeDSMethodDataBase64\r\n                    },\r\n                    method: \"executeDirectoryServer\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: 'DirectoryServer - Error',\r\n                    content: {\r\n                        preAuthResponse: request\r\n                    },\r\n                    error,\r\n                    method: \"directoryServerExecute\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Error\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n}","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { RestLogger } from \"../loggers\";\r\nimport { Browser } from \"../shared/utils\";\r\nimport { IAuthResponse, IChallengeService, IDirectoryServerService, IExecuteRequest, IPostAuthResponse, IThreeDSecureOptions, IThreeDSecureService } from \"./abstractions\";\r\nimport { IPreAuthResponse } from \"./abstractions/IPreAuthResponse\";\r\nimport { IFrameChallengeService } from \"./IFrameChallengeService\";\r\nimport { IFrameDirectoryServerService } from \"./IFrameDirectoryServerService\";\r\n\r\n export class ThreeDSecureService implements IThreeDSecureService {\r\n    private readonly _options: IThreeDSecureOptions;\r\n    private readonly _logger: ILogger;\r\n    private readonly _client: IHttpClient;\r\n    private readonly _directoryServer: IDirectoryServerService;\r\n    private readonly _challenge: IChallengeService;\r\n\r\n    constructor(\r\n        options: IThreeDSecureOptions,\r\n        logger: ILogger = new RestLogger(options),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger),\r\n        directoryServer: IDirectoryServerService = new IFrameDirectoryServerService(options, logger),\r\n        challenge: IChallengeService = new IFrameChallengeService(options, logger)) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n        this._client = httpClient;\r\n        this._directoryServer = directoryServer;\r\n        this._challenge = challenge;\r\n    }\r\n\r\n     async execute(request: IExecuteRequest): Promise<IPostAuthResponse> {\r\n        let preAuthResponse = await this.preAuth(request);\r\n        await this._directoryServer.execute({\r\n            preAuthResponse,\r\n            correlationId: request.correlationId\r\n        });\r\n        let authResponse = await this.auth(request);\r\n        await this._challenge.execute({\r\n            authResponse,\r\n            correlationId: request.correlationId\r\n        });\r\n        let postAuthResponse = await this.postAuth(request);\r\n        await this._logger.flush();\r\n        return postAuthResponse;\r\n     }\r\n\r\n     private async preAuth(request: IExecuteRequest): Promise<IPreAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing PreAuth',\r\n            content: request,\r\n            method: \"_preAuth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        const result = await this._client.send<IPreAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/preAuth`,\r\n            method: 'POST',\r\n            body: {\r\n                browser: Browser.create()\r\n            },\r\n            correlationId: request.correlationId\r\n        });\r\n        return await result.getData();\r\n     }\r\n\r\n     private async auth(request: IExecuteRequest): Promise<IAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing Auth',\r\n            content: request,\r\n            method: \"_auth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        const result = await this._client.send<IAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v1/${request.id}/auth`,\r\n            method: 'POST',\r\n            correlationId: request.correlationId\r\n        });\r\n        return await result.getData();\r\n     }\r\n\r\n     private async postAuth(request: IExecuteRequest): Promise<IPostAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing PostAuth',\r\n            content: request,\r\n            method: \"_postAuth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        const result =  await this._client.send<IPostAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/postAuth`,\r\n            method: 'POST',\r\n            correlationId: request.correlationId\r\n        });\r\n        return await result.getData();\r\n     }\r\n }\r\n\r\n "],"names":["LogLevel","Stopwatch","constructor","this","start","end","Date","now","stop","elapsed","Base64Converter","static","data","json","JSON","stringify","btoa","replace","Browser","colorDepth","find","x","screen","javaEnabled","navigator","javascriptEnabled","language","userAgent","screenWidth","window","width","screenHeight","height","timezoneOffset","getTimezoneOffset","acceptHeader","Delay","delay","_task","_timeout","Promise","resolve","setTimeout","wait","cancel","clearTimeout","reject","message","id","HtmlElementFactory","createIFrame","iframe","document","createElement","name","onReadyFn","isVisible","onCreatedFn","style","opacity","parent","appendChild","createForm","form","action","actionUrl","target","method","createInput","input","type","LinearRetryPolicy","options","logger","_options","_logger","execute","executeFn","correlationId","_this","async","_lastError","attempt","lastError","result","maxAttempts","isSuccess","isTransientError","error","additionalData","log","content","level","Warning","sleep","attemptDelay","Error","FetchHttpClient","retryPolicy","_retryPolicy","request","self","timeout","timeoutInSeconds","abortController","AbortController","timeoutId","abort","url","URL","host","Information","stopwatch","response","fetch","headers","_extends","toString","accept","keepalive","body","signal","ok","getData","includes","status","ConsoleLogger","flush","_log$error","errorLog","console","RestLogger","httpClient","_httpClient","_logs","_interval","setInterval","sendBatch","bind","batchLogIntervalInSeconds","DEFAULT_BATCH_TIMEOUT","restLoggerUrl","unshift","customMessage","service","version","environment","executionDate","entrypoint","clearInterval","length","logs","splice","map","send","ChallengeWindowSize","IFrameChallengeService","authResponse","challengeUrl","container","innerHTML","iFrame","IFRAME_NAME","useDefaultStyle","onIFrameCreatedFn","onIFrameReadyFn","FORM_NAME","threeDSRequestInput","CREQ_INPUT_NAME","CREQ_INPUT_TYPE","cReq","threeDSServerTransID","processId","acsTransID","challengeId","messageVersion","challengeVersion","messageType","challengeWindowSize","width250xheight400","base64CReq","convert","value","checkIFrameLoaded","_iFrame$contentWindow","iframeDoc","contentDocument","contentWindow","readyState","innerText","submit","IFrameDirectoryServerService","preAuthResponse","dsMethodUrl","_this$_options$onIFra","call","threeDSMethodDataInput","FORM_INPUT_NAME","FROM_INPUT_TYPE","threeDSMethodData","threeDSMethodNotificationURL","notificationUrl","threeDSMethodDataBase64","ThreeDSecureService","directoryServer","challenge","_client","_directoryServer","_challenge","preAuth","auth","postAuthResponse","postAuth","threeDSecureUrl","browser","create"],"mappings":"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"}