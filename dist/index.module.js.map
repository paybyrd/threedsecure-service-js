{"version":3,"file":"index.module.js","sources":["../src/shared/utils/Base64Converter.ts","../src/shared/utils/Browser.ts","../src/shared/utils/Delay.ts","../src/shared/utils/HtmlElementFactory.ts","../src/httpClients/retryPolicies/LinearRetryPolicy.ts","../src/loggers/abstractions/LogLevel.ts","../src/httpClients/FetchHttpClient.ts","../src/loggers/ConsoleLogger.ts","../src/services/abstractions/ChallengeWindowSize.ts","../src/loggers/ElasticLogger.ts","../src/services/IFrameChallengeService.ts","../src/services/IFrameDirectoryServerService.ts","../src/services/ThreeDSecureService.ts"],"sourcesContent":["export class Base64Converter {\r\n    static convert(data: object) {\r\n        const json = JSON.stringify(data);\r\n        const base64Json = btoa(json);\r\n        return base64Json\r\n            .replace(/=/g, '')\r\n            .replace(/\\+/g, '-')\r\n            .replace(/\\//g, '_');\r\n    }\r\n}","import { IBrowser } from \"../abstractions\";\r\n\r\nexport class Browser {\r\n    static create(): IBrowser {\r\n        const allowedBrowserColorDepth = [48, 32, 24, 16, 15, 8, 4, 1];\r\n        const colorDepth = allowedBrowserColorDepth.find(x => x <= screen.colorDepth)!;\r\n        return {\r\n            javaEnabled: navigator.javaEnabled(),\r\n            javascriptEnabled: true,\r\n            language: navigator.language,\r\n            userAgent: navigator.userAgent,\r\n            screenWidth: window.screen.width,\r\n            screenHeight: window.screen.height,\r\n            timezoneOffset: new Date().getTimezoneOffset(),\r\n            colorDepth,\r\n            acceptHeader: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'\r\n        };\r\n    }\r\n}","import { IDelay } from \"../abstractions\";\r\n\r\nexport class Delay implements IDelay {\r\n    private _task: Promise<void>;\r\n    private _timeout: NodeJS.Timeout;\r\n    \r\n    constructor(delay: number) {\r\n        this._task = new Promise<void>((resolve) => {\r\n            this._timeout = setTimeout(resolve, delay);\r\n        });\r\n    }\r\n\r\n    wait() {\r\n        return this._task;\r\n    }\r\n\r\n    cancel() {\r\n        clearTimeout(this._timeout);\r\n        this._task = Promise.reject({\r\n            message: 'Timer cancelled'\r\n        });\r\n    }\r\n\r\n    static sleep(delay: number): IDelay {\r\n        return new Delay(delay);\r\n    }\r\n\r\n    static cancel(id: number) {\r\n        clearTimeout(id);\r\n    }\r\n}","import { ICreateForm, ICreateIFrame, ICreateInput } from \"./abstractions\";\r\n\r\nexport class HtmlElementFactory {\r\n    static createIFrame(createIFrame: ICreateIFrame) : HTMLIFrameElement {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.id = createIFrame.name;\r\n        iframe.name = createIFrame.name;\r\n\r\n        if (createIFrame.useDefaultStyle) {\r\n            iframe.setAttribute('style', `border: none;position: absolute; top: 0; left: 0; bottom: 0; right: 0; width: 100%; height: 100%;opacity: ${createIFrame.isVisible ? '1' : '0'}`);\r\n        }\r\n        else {\r\n            iframe.style.opacity = createIFrame.isVisible ? '1' : '0';            \r\n        }\r\n\r\n        createIFrame.parent?.appendChild(iframe);\r\n\r\n        return iframe;\r\n    }\r\n\r\n    static createForm(createForm: ICreateForm): HTMLFormElement {\r\n        const form = document.createElement('form');\r\n        form.id = createForm.name;\r\n        form.name = createForm.name;\r\n        form.action = createForm.actionUrl;\r\n        form.target = createForm.target;\r\n        form.method = createForm.method;\r\n        \r\n        createForm.parent.appendChild(form);\r\n\r\n        return form;\r\n    }\r\n\r\n    static createInput(createInput: ICreateInput): HTMLInputElement {\r\n        const input = document.createElement('input');\r\n        input.id = createInput.name;\r\n        input.name = createInput.name;\r\n        input.type = createInput.type;\r\n        \r\n        createInput.parent.appendChild(input);\r\n\r\n        return input;\r\n    }\r\n}","import { ILog, ILogger } from \"../../loggers/abstractions\";\r\nimport { Delay } from \"../../shared/utils\";\r\nimport { ExecuteFunction, IRetryOptions, IRetryPolicy } from \"../abstractions\";\r\n\r\nexport class LinearRetryPolicy implements IRetryPolicy {\r\n    private readonly _options: IRetryOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IRetryOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n    \r\n    execute<T>(executeFn: ExecuteFunction<T>, method: string) : Promise<T> {\r\n        return new Promise<T>(async (resolve, reject) => {\r\n            let attempt = 1;\r\n            let lastError: ILog|null = null;\r\n            do {\r\n                try {\r\n                    let result = await executeFn({\r\n                        attempt: attempt,\r\n                        maxAttempts: this._options.maxAttempts\r\n                    });\r\n                    if (result.isSuccess) {\r\n                        resolve(result.data);\r\n                        return;\r\n                    }\r\n                    if (!result.isTransientError) {\r\n                        reject(result);\r\n                        return;\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    lastError = {\r\n                        message: `Unhandled error calling \"${method}\"`,\r\n                        error,\r\n                        additionalData: {\r\n                            attempt,\r\n                            maxAttempts: this._options.maxAttempts\r\n                        }\r\n                    };\r\n                    this._logger.log(lastError);\r\n                }\r\n                attempt++;\r\n                await Delay.sleep(this._options.attemptDelay).wait();\r\n            } while (attempt <= this._options.maxAttempts);\r\n\r\n            reject(lastError);\r\n        });\r\n    }\r\n}","export enum LogLevel {\r\n    Trace = 0,\r\n    Debug = 1,\r\n    Information = 2,\r\n    Warning = 3,\r\n    Error = 4,\r\n    Critical = 5,\r\n    None = 6\r\n}\r\n","import { ILogger } from \"../loggers/abstractions\";\r\nimport { IHttpClient, IHttpClientOptions, IRequest, IRetryPolicy } from \"./abstractions\";\r\nimport { LinearRetryPolicy } from \"./retryPolicies\";\r\n\r\nexport class FetchHttpClient implements IHttpClient {\r\n    private readonly _options: IHttpClientOptions;\r\n    private readonly _retryPolicy: IRetryPolicy;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IHttpClientOptions, logger: ILogger, retryPolicy: IRetryPolicy = new LinearRetryPolicy(options, logger)) {\r\n        this._retryPolicy = retryPolicy;\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n    \r\n    async send<T>(request: IRequest): Promise<T> {\r\n        const self = this;\r\n        return await this._retryPolicy.execute<T>(async ({attempt, maxAttempts}) => {\r\n            const timeout = (self._options.timeoutInSeconds || 30) * 1000;\r\n            const abortController = new AbortController();\r\n            const timeoutId = setTimeout(() => abortController.abort(), timeout);\r\n\r\n            this._logger.log({\r\n                message: '[Request] HttpClient',\r\n                content: {\r\n                    request,\r\n                    attempt,\r\n                    maxAttempts\r\n                }\r\n            });\r\n\r\n            const response = await fetch(request.url, {\r\n                headers: {\r\n                    ...request.headers,\r\n                    'x-attempt': attempt.toString(),\r\n                    'x-max-attempts': maxAttempts.toString(),\r\n                    'accept': 'application/json',\r\n                    'content-type': 'application/json',\r\n                },\r\n                keepalive: true,\r\n                body: JSON.stringify(request.body),\r\n                method: request.method,\r\n                signal: abortController.signal\r\n            });\r\n\r\n            this._logger.log({\r\n                message: '[Response] HttpClient',\r\n                content: {\r\n                    response,\r\n                    attempt,\r\n                    maxAttempts\r\n                }\r\n            });\r\n\r\n            clearTimeout(timeoutId);\r\n            const result = await response.json();\r\n            return {\r\n                isSuccess: response.ok,\r\n                isTransientError: this.isTransientError(response),\r\n                data: response.ok ? result.data : result\r\n            };\r\n        }, `[${request.method}] ${request.url}`);\r\n    }\r\n\r\n    isTransientError(response: Response): boolean {\r\n        const TRANSIENT_STATUS = [409, 424, 500, 503, 504];\r\n\r\n        return TRANSIENT_STATUS.includes(response.status);\r\n    }\r\n}","import { ILog, ILogger } from \"./abstractions\";\r\n\r\nexport class ConsoleLogger implements ILogger {\r\n    log(log: ILog): void {\r\n        console.log(JSON.stringify(log));\r\n    }\r\n\r\n}","export enum ChallengeWindowSize {\r\n    width250xheight400 = '01',\r\n    width390xheight400 = '02',\r\n    width500xheight600 = '03',\r\n    width600xheight400 = '04',\r\n    fullscreen = '05'\r\n}\r\n","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { LinearRetryPolicy } from \"../httpClients/retryPolicies\";\r\nimport { IElasticLoggerOptions, ILog, ILogger, LogLevel } from \"./abstractions\";\r\nimport { ConsoleLogger } from \"./ConsoleLogger\";\r\n\r\ninterface IFullLog {\r\n    service: {\r\n        name: string;\r\n        version: string\r\n    },\r\n    executionDate: Date,\r\n    entrypoint: string;\r\n    method: string;\r\n    correlationId: string;\r\n    level: LogLevel;\r\n    customMessage: string;\r\n    message: string;\r\n    content?: object;\r\n    exeption?: object;\r\n}\r\n\r\nexport class ElasticLogger implements ILogger {\r\n    private readonly _httpClient: IHttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IElasticLoggerOptions;\r\n    private _logs: Array<IFullLog> = [];\r\n\r\n    constructor(options: IElasticLoggerOptions,\r\n        logger: ILogger = new ConsoleLogger(),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger, new LinearRetryPolicy({\r\n            maxAttempts: 3,\r\n            attemptDelay: 5000\r\n        }, logger))) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n        this._httpClient = httpClient;\r\n        setInterval(this.sendBatch.bind(this), 1000);\r\n    }\r\n\r\n    log(log: ILog): void {\r\n        this._logger.log(log);\r\n\r\n        if (!this._options.elasticLoggerUrl)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._logs.push({\r\n            customMessage: log.message,\r\n            message: `[FRONTEND] ${log.message}`,\r\n            service: {\r\n                name: 'ThreeDSecure.Service.JS',\r\n                version: '3.0.0'\r\n            },\r\n            executionDate: new Date(),\r\n            entrypoint: 'Execute',\r\n            method: log.method,\r\n            correlationId: log.correlationId,\r\n            content: log.content,\r\n            level: log.level\r\n        });\r\n    }\r\n\r\n    async sendBatch() : Promise<void> {\r\n        const logs = this._logs.splice(0, 10);\r\n        if (!logs.length) {\r\n            return;\r\n        }\r\n        try {\r\n            await this._httpClient.send<void>({\r\n                url: this._options.elasticLoggerUrl,\r\n                method: 'POST',\r\n                body: logs\r\n            });\r\n        } catch (error) {\r\n            this._logger.log({\r\n                error: error,\r\n                message: 'Error sending message to elastic',\r\n                method: 'sendBatch',\r\n                correlationId: logs.map(x => x.correlationId)[0],\r\n                level: LogLevel.Error\r\n            });\r\n        }\r\n    }\r\n}","import { ILogger } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { ChallengeWindowSize, IAuthResponse, IChallengeOptions, IChallengeService } from \"./abstractions\";\r\n\r\nexport class IFrameChallengeService implements IChallengeService {\r\n    private static readonly IFRAME_NAME = 'challengeIframe';\r\n    private static readonly FORM_NAME = 'challengeForm';\r\n    private static readonly CREQ_INPUT_NAME = 'creq';\r\n    private static readonly CREQ_INPUT_TYPE = 'hidden';\r\n\r\n    private readonly _options: IChallengeOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IChallengeOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n\r\n    execute(authResponse: IAuthResponse): Promise<void> {\r\n        if (!authResponse.challengeUrl) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: '[Request] Challenge execution',\r\n                    content: {\r\n                        authResponse\r\n                    }\r\n                });\r\n\r\n                 HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.IFRAME_NAME,\r\n                    isVisible: true,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn\r\n                });\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.FORM_NAME,\r\n                    actionUrl: authResponse.challengeUrl,\r\n                    target: IFrameChallengeService.IFRAME_NAME,\r\n                    method: 'post'\r\n                });\r\n\r\n                const threeDSRequestInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameChallengeService.CREQ_INPUT_NAME,\r\n                    type: IFrameChallengeService.CREQ_INPUT_TYPE\r\n                });\r\n\r\n                const cReq = {\r\n                    threeDSServerTransID: authResponse.processId,\r\n                    acsTransID: authResponse.challengeId,\r\n                    messageVersion: authResponse.challengeVersion,\r\n                    messageType: \"CReq\",\r\n                    challengeWindowSize: this._options.challengeWindowSize || ChallengeWindowSize.width250xheight400\r\n                };\r\n\r\n                const base64CReq = Base64Converter.convert(cReq)\r\n                threeDSRequestInput.value = base64CReq;\r\n\r\n                form.submit();\r\n\r\n                this._logger.log({\r\n                    message: '[Response] Challenge execution',\r\n                    content: {\r\n                        authResponse,\r\n                        cReq,\r\n                        base64CReq\r\n                    }\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: '[Error] Challenge execution',\r\n                    content: {\r\n                        authResponse,\r\n                        error\r\n                    }\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}","import { ILogger } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { IDirectoryServerOptions, IDirectoryServerService } from \"./abstractions\";\r\nimport { IPreAuthResponse } from \"./abstractions/IPreAuthResponse\";\r\n\r\nexport class IFrameDirectoryServerService implements IDirectoryServerService {\r\n    private static readonly IFRAME_NAME: string = 'threeDSMethodIframe';\r\n    private static readonly FORM_NAME: string = 'threeDSMethodForm';\r\n    private static readonly FORM_INPUT_NAME: string = 'threeDSMethodData';\r\n    private static readonly FROM_INPUT_TYPE: string = 'hidden';\r\n\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IDirectoryServerOptions;\r\n\r\n    constructor(options: IDirectoryServerOptions, logger: ILogger) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n\r\n    execute(preAuthResponse: IPreAuthResponse) : Promise<void> {\r\n        if (!preAuthResponse.dsMethodUrl) {\r\n            return Promise.resolve();\r\n        }        \r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: '[Request] DirectoryServer execution',\r\n                    content: {\r\n                        preAuthResponse\r\n                    }\r\n                });\r\n\r\n                const iframe = HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    isVisible: false,\r\n                    name: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn\r\n                });\r\n                this._options.onIFrameCreatedFn?.call(this._options, iframe);\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameDirectoryServerService.FORM_NAME,\r\n                    actionUrl: preAuthResponse.dsMethodUrl,\r\n                    target: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    method: 'POST'\r\n                });\r\n\r\n                const threeDSMethodDataInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameDirectoryServerService.FORM_INPUT_NAME,\r\n                    type: IFrameDirectoryServerService.FROM_INPUT_TYPE\r\n                });\r\n\r\n                const threeDSMethodData = {\r\n                    threeDSServerTransID: preAuthResponse.processId,\r\n                    threeDSMethodNotificationURL: preAuthResponse.notificationUrl\r\n                };\r\n\r\n                const threeDSMethodDataBase64 = Base64Converter.convert(threeDSMethodData)\r\n                threeDSMethodDataInput.value = threeDSMethodDataBase64;\r\n\r\n                form.submit();\r\n\r\n                this._logger.log({\r\n                    message: '[Response] DirectoryServer execution',\r\n                    content: {\r\n                        preAuthResponse,\r\n                        threeDSMethodDataBase64\r\n                    }\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: '[Error] DirectoryServer execution',\r\n                    content: {\r\n                        preAuthResponse,\r\n                        error\r\n                    }\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n}","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { ILogger } from \"../loggers/abstractions\";\r\nimport { ElasticLogger } from \"../loggers\";\r\nimport { Browser } from \"../shared/utils\";\r\nimport { IAuthRequest, IAuthResponse, IChallengeService, IDirectoryServerService, IExecuteRequest, IPostAuthRequest, IPostAuthResponse, IThreeDSecureOptions, IThreeDSecureService } from \"./abstractions\";\r\nimport { IPreAuthRequest } from \"./abstractions/IPreAuthRequest\";\r\nimport { IPreAuthResponse } from \"./abstractions/IPreAuthResponse\";\r\nimport { IFrameChallengeService } from \"./IFrameChallengeService\";\r\nimport { IFrameDirectoryServerService } from \"./IFrameDirectoryServerService\";\r\n\r\n export class ThreeDSecureService implements IThreeDSecureService {\r\n    private readonly _options: IThreeDSecureOptions;\r\n    private readonly _logger: ILogger;\r\n    private readonly _client: IHttpClient;\r\n    private readonly _directoryServer: IDirectoryServerService;\r\n    private readonly _challenge: IChallengeService;\r\n\r\n    constructor(\r\n        options: IThreeDSecureOptions,\r\n        logger: ILogger = new ElasticLogger(options),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger),\r\n        directoryServer: IDirectoryServerService = new IFrameDirectoryServerService(options, logger),\r\n        challenge: IChallengeService = new IFrameChallengeService(options, logger)) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n        this._client = httpClient;\r\n        this._directoryServer = directoryServer;\r\n        this._challenge = challenge;\r\n        this._logger.log({\r\n            message: '3DS configured',\r\n            content: options\r\n        });\r\n    }\r\n\r\n     async execute(request: IExecuteRequest): Promise<IPostAuthResponse> {\r\n        this._logger.log({\r\n            message: '[Request] PreAuth',\r\n            content: request\r\n        });\r\n        let preAuthResponse = await this._preAuth(request);\r\n        this._logger.log({\r\n            message: '[Response] PreAuth',\r\n            content: preAuthResponse\r\n        });\r\n        await this._directoryServer.execute(preAuthResponse);\r\n        this._logger.log({\r\n            message: '[Request] Auth',\r\n            content: preAuthResponse\r\n        });\r\n        let authResponse = await this._auth(preAuthResponse);\r\n        this._logger.log({\r\n            message: '[Response] Auth',\r\n            content: authResponse\r\n        });\r\n        await this._challenge.execute(authResponse);\r\n        this._logger.log({\r\n            message: '[Request] PostAuth',\r\n            content: authResponse\r\n        });\r\n        let postAuthResponse = await this._postAuth(authResponse);\r\n        this._logger.log({\r\n            message: '[Response] PostAuth',\r\n            content: postAuthResponse\r\n        });\r\n        return postAuthResponse;\r\n     }\r\n\r\n     _preAuth(request: IPreAuthRequest): Promise<IPreAuthResponse> {\r\n        return this._client.send<IPreAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/preAuth`,\r\n            method: 'POST',\r\n            body: {\r\n                browser: Browser.create()\r\n            }\r\n        });\r\n     }\r\n\r\n     _auth(request: IAuthRequest): Promise<IAuthResponse> {\r\n        return this._client.send<IAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v1/${request.id}/auth`,\r\n            method: 'POST'\r\n        });\r\n     }\r\n\r\n     _postAuth(request: IPostAuthRequest): Promise<IPostAuthResponse> {\r\n        return this._client.send<IPostAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/postAuth`,\r\n            method: 'POST'\r\n        });\r\n     }\r\n }\r\n\r\n "],"names":["Base64Converter","convert","data","json","JSON","stringify","btoa","replace","Browser","create","colorDepth","find","x","screen","javaEnabled","navigator","javascriptEnabled","language","userAgent","screenWidth","window","width","screenHeight","height","timezoneOffset","Date","getTimezoneOffset","acceptHeader","Delay","delay","_this","this","_task","_timeout","Promise","resolve","setTimeout","_proto","prototype","wait","cancel","clearTimeout","reject","message","sleep","id","HtmlElementFactory","createIFrame","_createIFrame$parent","iframe","document","createElement","name","useDefaultStyle","setAttribute","isVisible","style","opacity","parent","appendChild","createForm","form","action","actionUrl","target","method","createInput","input","type","_settle","pact","state","value","s","_Pact","then","onFulfilled","onRejected","result","callback","v","e","o","LogLevel","LinearRetryPolicy","options","logger","_options","_logger","execute","executeFn","_exit","_temp4","_result2","lastError","attempt","_temp3","_do","_temp2","_result","attemptDelay","_temp","maxAttempts","isSuccess","isTransientError","_catch","error","log","additionalData","FetchHttpClient","retryPolicy","_retryPolicy","send","request","self","_ref","timeout","timeoutInSeconds","abortController","AbortController","timeoutId","abort","content","fetch","url","headers","_extends","toString","accept","keepalive","body","signal","response","ok","includes","status","ConsoleLogger","console","ChallengeWindowSize","ElasticLogger","httpClient","_httpClient","_logs","setInterval","sendBatch","bind","elasticLoggerUrl","push","customMessage","service","version","executionDate","entrypoint","correlationId","level","logs","splice","length","map","Error","IFrameChallengeService","authResponse","challengeUrl","container","IFRAME_NAME","onIFrameCreatedFn","FORM_NAME","threeDSRequestInput","CREQ_INPUT_NAME","CREQ_INPUT_TYPE","cReq","threeDSServerTransID","processId","acsTransID","challengeId","messageVersion","challengeVersion","messageType","challengeWindowSize","width250xheight400","base64CReq","submit","IFrameDirectoryServerService","preAuthResponse","dsMethodUrl","_this$_options$onIFra","call","threeDSMethodDataInput","FORM_INPUT_NAME","FROM_INPUT_TYPE","threeDSMethodDataBase64","threeDSMethodNotificationURL","notificationUrl","ThreeDSecureService","directoryServer","challenge","_client","_directoryServer","_challenge","_preAuth","_auth","_postAuth","postAuthResponse","threeDSecureUrl","browser"],"mappings":"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"}