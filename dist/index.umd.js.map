{"version":3,"file":"index.umd.js","sources":["../src/shared/utils/Base64Converter.ts","../src/shared/utils/Browser.ts","../src/shared/utils/Delay.ts","../src/shared/utils/HtmlElementFactory.ts","../src/httpClients/retryPolicies/LinearRetryPolicy.ts","../src/services/abstractions/ChallengeWindowSize.ts","../src/httpClients/FetchHttpClient.ts","../src/loggers/ConsoleLogger.ts","../src/services/IFrameChallengeService.ts","../src/services/IFrameDirectoryServerService.ts","../src/services/ThreeDSecureService.ts"],"sourcesContent":["export class Base64Converter {\r\n    static convert(data: object) {\r\n        const json = JSON.stringify(data);\r\n        const buffer = Buffer.from(json, 'utf-8');\r\n        const base64Json = buffer.toString('base64');\r\n        return base64Json\r\n            .replace(/=/g, '')\r\n            .replace(/\\+/g, '-')\r\n            .replace(/\\//g, '_');\r\n    }\r\n}","import { IBrowser } from \"../abstractions\";\r\n\r\nexport class Browser {\r\n    static create(): IBrowser {\r\n        const allowedBrowserColorDepth = [48, 32, 24, 16, 15, 8, 4, 1];\r\n        const colorDepth = allowedBrowserColorDepth.find(x => x <= screen.colorDepth)!;\r\n        return {\r\n            javaEnabled: navigator.javaEnabled(),\r\n            javascriptEnabled: true,\r\n            language: navigator.language,\r\n            userAgent: navigator.userAgent,\r\n            screenWidth: window.screen.width,\r\n            screenHeight: window.screen.height,\r\n            timezoneOffset: new Date().getTimezoneOffset(),\r\n            colorDepth,\r\n            acceptHeader: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'\r\n        };\r\n    }\r\n}","import { IDelay } from \"../abstractions\";\r\n\r\nexport class Delay implements IDelay {\r\n    private _task: Promise<void>;\r\n    private _timeout: NodeJS.Timeout;\r\n    \r\n    constructor(delay: number) {\r\n        this._task = new Promise<void>((resolve) => {\r\n            this._timeout = setTimeout(resolve, delay);\r\n        });\r\n    }\r\n\r\n    wait() {\r\n        return this._task;\r\n    }\r\n\r\n    cancel() {\r\n        clearTimeout(this._timeout);\r\n        this._task = Promise.reject({\r\n            message: 'Timer cancelled'\r\n        });\r\n    }\r\n\r\n    static sleep(delay: number): IDelay {\r\n        return new Delay(delay);\r\n    }\r\n\r\n    static cancel(id: number) {\r\n        clearTimeout(id);\r\n    }\r\n}","import { ICreateForm, ICreateIFrame, ICreateInput } from \"./abstractions\";\r\n\r\nexport class HtmlElementFactory {\r\n    static createIFrame(createIFrame: ICreateIFrame) : HTMLIFrameElement {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.id = createIFrame.name;\r\n        iframe.name = createIFrame.name;\r\n\r\n        if (createIFrame.useDefaultStyle) {\r\n            iframe.setAttribute('style', `border: none;position: absolute; top: 0; left: 0; bottom: 0; right: 0; width: 100%; height: 100%;opacity: ${createIFrame.isVisible ? '1' : '0'}`);\r\n        }\r\n        else {\r\n            iframe.style.opacity = createIFrame.isVisible ? '1' : '0';            \r\n        }\r\n\r\n        createIFrame.parent?.appendChild(iframe);\r\n\r\n        return iframe;\r\n    }\r\n\r\n    static createForm(createForm: ICreateForm): HTMLFormElement {\r\n        const form = document.createElement('form');\r\n        form.id = createForm.name;\r\n        form.name = createForm.name;\r\n        form.action = createForm.actionUrl;\r\n        form.target = createForm.target;\r\n        form.method = createForm.method;\r\n        \r\n        createForm.parent.appendChild(form);\r\n\r\n        return form;\r\n    }\r\n\r\n    static createInput(createInput: ICreateInput): HTMLInputElement {\r\n        const input = document.createElement('input');\r\n        input.id = createInput.name;\r\n        input.name = createInput.name;\r\n        input.type = createInput.type;\r\n        \r\n        createInput.parent.appendChild(input);\r\n\r\n        return input;\r\n    }\r\n}","import { ILog, ILogger } from \"../../loggers/abstractions\";\r\nimport { Delay } from \"../../shared/utils\";\r\nimport { ExecuteFunction, IRetryOptions, IRetryPolicy } from \"../abstractions\";\r\n\r\nexport class LinearRetryPolicy implements IRetryPolicy {\r\n    private readonly _options: IRetryOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IRetryOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n    \r\n    execute<T>(executeFn: ExecuteFunction<T>, method: string) : Promise<T> {\r\n        return new Promise<T>(async (resolve, reject) => {\r\n            let attempt = 1;\r\n            let lastError: ILog|null = null;\r\n            do {\r\n                try {\r\n                    let result = await executeFn({\r\n                        attempt: attempt,\r\n                        maxAttempts: this._options.maxAttempts\r\n                    });\r\n                    if (result.isSuccess) {\r\n                        resolve(result.data);\r\n                        return;\r\n                    }\r\n                    if (!result.isTransientError) {\r\n                        reject(result);\r\n                        return;\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    lastError = {\r\n                        message: `Unhandled error calling \"${method}\"`,\r\n                        error,\r\n                        additionalData: {\r\n                            attempt,\r\n                            maxAttempts: this._options.maxAttempts\r\n                        }\r\n                    };\r\n                    this._logger.log(lastError);\r\n                }\r\n                attempt++;\r\n                await Delay.sleep(this._options.attemptDelay).wait();\r\n            } while (attempt <= this._options.maxAttempts);\r\n\r\n            reject(lastError);\r\n        });\r\n    }\r\n}","export enum ChallengeWindowSize {\r\n    width250xheight400 = '01',\r\n    width390xheight400 = '02',\r\n    width500xheight600 = '03',\r\n    width600xheight400 = '04',\r\n    fullscreen = '05'\r\n}\r\n","import { ILogger } from \"../loggers/abstractions\";\r\nimport { IHttpClient, IHttpClientOptions, IRequest, IRetryPolicy } from \"./abstractions\";\r\nimport { LinearRetryPolicy } from \"./retryPolicies\";\r\n\r\nexport class FetchHttpClient implements IHttpClient {\r\n    private readonly _options: IHttpClientOptions;\r\n    private readonly _retryPolicy: IRetryPolicy;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IHttpClientOptions, logger: ILogger, retryPolicy: IRetryPolicy = new LinearRetryPolicy(options, logger)) {\r\n        this._retryPolicy = retryPolicy;\r\n        this._logger = logger;\r\n    }\r\n    \r\n    async send<T>(request: IRequest): Promise<T> {\r\n        return await this._retryPolicy.execute<T>(async ({attempt, maxAttempts}) => {\r\n            const abortController = new AbortController();\r\n            const timeoutId = setTimeout(() => abortController.abort(), this._options.timeoutInSeconds * 1000);\r\n\r\n            this._logger.log({\r\n                message: '[Request] HttpClient',\r\n                content: {\r\n                    request,\r\n                    attempt,\r\n                    maxAttempts\r\n                }\r\n            });\r\n\r\n            const response = await fetch(request.url, {\r\n                headers: {\r\n                    ...request.headers,\r\n                    'x-attempt': attempt.toString(),\r\n                    'x-max-attempts': maxAttempts.toString(),\r\n                    'accept': 'application/json',\r\n                    'content-type': 'application/json',\r\n                },\r\n                keepalive: true,\r\n                body: JSON.stringify(request.body),\r\n                method: request.method,\r\n                signal: abortController.signal\r\n            });\r\n\r\n            this._logger.log({\r\n                message: '[Response] HttpClient',\r\n                content: {\r\n                    response,\r\n                    attempt,\r\n                    maxAttempts\r\n                }\r\n            });\r\n\r\n            clearTimeout(timeoutId);\r\n            return {\r\n                isSuccess: response.ok,\r\n                isTransientError: this.isTransientError(response),\r\n                data: await response.json()\r\n            };\r\n        }, `[${request.method}] ${request.url}`);\r\n    }\r\n\r\n    isTransientError(response: Response): boolean {\r\n        const TRANSIENT_STATUS = [409, 424, 500, 503, 504];\r\n\r\n        return TRANSIENT_STATUS.includes(response.status);\r\n    }\r\n}","import { ILog, ILogger } from \"./abstractions\";\r\n\r\nexport class ConsoleLogger implements ILogger {\r\n    log(log: ILog): void {\r\n        console.log(JSON.stringify(log));\r\n    }\r\n\r\n}","import { ILogger } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { ChallengeWindowSize, IAuthResponse, IChallengeOptions, IChallengeService } from \"./abstractions\";\r\n\r\nexport class IFrameChallengeService implements IChallengeService {\r\n    private static readonly IFRAME_NAME = 'challengeIframe';\r\n    private static readonly FORM_NAME = 'challengeForm';\r\n    private static readonly CREQ_INPUT_NAME = 'creq';\r\n    private static readonly CREQ_INPUT_TYPE = 'hidden';\r\n\r\n    private readonly _options: IChallengeOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IChallengeOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n\r\n    execute(authResponse: IAuthResponse): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: '[Request] Challenge execution',\r\n                    content: {\r\n                        authResponse\r\n                    }\r\n                });\r\n\r\n                 HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.IFRAME_NAME,\r\n                    isVisible: true,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn\r\n                });\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.FORM_NAME,\r\n                    actionUrl: authResponse.challengeUrl,\r\n                    target: IFrameChallengeService.IFRAME_NAME,\r\n                    method: 'post'\r\n                });\r\n\r\n                const threeDSRequestInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameChallengeService.CREQ_INPUT_NAME,\r\n                    type: IFrameChallengeService.CREQ_INPUT_TYPE\r\n                });\r\n\r\n                const cReq = {\r\n                    threeDSServerTransID: authResponse.processId,\r\n                    acsTransID: authResponse.challengeId,\r\n                    messageVersion: authResponse.challengeVersion,\r\n                    messageType: \"CReq\",\r\n                    challengeWindowSize: this._options.challengeWindowSize || ChallengeWindowSize.width250xheight400\r\n                };\r\n\r\n                const base64CReq = Base64Converter.convert(cReq)\r\n                threeDSRequestInput.value = base64CReq;\r\n\r\n                form.submit();\r\n\r\n                this._logger.log({\r\n                    message: '[Response] Challenge execution',\r\n                    content: {\r\n                        authResponse,\r\n                        cReq,\r\n                        base64CReq\r\n                    }\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: '[Error] Challenge execution',\r\n                    content: {\r\n                        authResponse,\r\n                        error\r\n                    }\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}","import { ILogger } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { IDirectoryServerOptions, IDirectoryServerService } from \"./abstractions\";\r\nimport { IPreAuthResponse } from \"./abstractions/IPreAuthResponse\";\r\n\r\nexport class IFrameDirectoryServerService implements IDirectoryServerService {\r\n    private static readonly IFRAME_NAME: string = 'threeDSMethodIframe';\r\n    private static readonly FORM_NAME: string = 'threeDSMethodForm';\r\n    private static readonly FORM_INPUT_NAME: string = 'threeDSMethodData';\r\n    private static readonly FROM_INPUT_TYPE: string = 'hidden';\r\n\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IDirectoryServerOptions;\r\n\r\n    constructor(options: IDirectoryServerOptions, logger: ILogger) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n\r\n    execute(preAuthResponse: IPreAuthResponse) : Promise<void> {\r\n        if (!preAuthResponse.dsMethodUrl) {\r\n            return Promise.resolve();\r\n        }        \r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: '[Request] DirectoryServer execution',\r\n                    content: {\r\n                        preAuthResponse\r\n                    }\r\n                });\r\n\r\n                const iframe = HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    isVisible: false,\r\n                    name: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn\r\n                });\r\n                this._options.onIFrameCreatedFn?.call(this._options, iframe);\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameDirectoryServerService.FORM_NAME,\r\n                    actionUrl: preAuthResponse.dsMethodUrl,\r\n                    target: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    method: 'POST'\r\n                });\r\n\r\n                const threeDSMethodDataInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameDirectoryServerService.FORM_INPUT_NAME,\r\n                    type: IFrameDirectoryServerService.FROM_INPUT_TYPE\r\n                });\r\n\r\n                const threeDSMethodData = {\r\n                    threeDSServerTransID: preAuthResponse.processId,\r\n                    threeDSMethodNotificationURL: preAuthResponse.notificationUrl\r\n                };\r\n\r\n                const threeDSMethodDataBase64 = Base64Converter.convert(threeDSMethodData)\r\n                threeDSMethodDataInput.value = threeDSMethodDataBase64;\r\n\r\n                form.submit();\r\n\r\n                this._logger.log({\r\n                    message: '[Response] DirectoryServer execution',\r\n                    content: {\r\n                        preAuthResponse,\r\n                        threeDSMethodDataBase64\r\n                    }\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: '[Error] DirectoryServer execution',\r\n                    content: {\r\n                        preAuthResponse,\r\n                        error\r\n                    }\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n}","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { ConsoleLogger } from \"../loggers\";\r\nimport { ILogger } from \"../loggers/abstractions\";\r\nimport { Browser } from \"../shared/utils\";\r\nimport { IAuthRequest, IAuthResponse, IChallengeService, IDirectoryServerService, IExecuteRequest, IExecuteResponse, IPostAuthRequest, IPostAuthResponse, IThreeDSecureOptions, IThreeDSecureService } from \"./abstractions\";\r\nimport { IPreAuthRequest } from \"./abstractions/IPreAuthRequest\";\r\nimport { IPreAuthResponse } from \"./abstractions/IPreAuthResponse\";\r\nimport { IFrameChallengeService } from \"./IFrameChallengeService\";\r\nimport { IFrameDirectoryServerService } from \"./IFrameDirectoryServerService\";\r\n\r\n export class ThreeDSecureService implements IThreeDSecureService {\r\n    private readonly _options: IThreeDSecureOptions;\r\n    private readonly _logger: ILogger;\r\n    private readonly _client: IHttpClient;\r\n    private readonly _directoryServer: IDirectoryServerService;\r\n    private readonly _challenge: IChallengeService;\r\n\r\n    constructor(\r\n        options: IThreeDSecureOptions,\r\n        logger: ILogger = new ConsoleLogger(),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger),\r\n        directoryServer: IDirectoryServerService = new IFrameDirectoryServerService(options, logger),\r\n        challenge: IChallengeService = new IFrameChallengeService(options, logger)) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n        this._client = httpClient;\r\n        this._directoryServer = directoryServer;\r\n        this._challenge = challenge;\r\n    }\r\n\r\n     async execute(request: IExecuteRequest): Promise<IExecuteResponse> {\r\n        this._logger.log({\r\n            message: '[Request] PreAuth',\r\n            content: request\r\n        });\r\n        let preAuthResponse = await this._preAuth(request);\r\n        this._logger.log({\r\n            message: '[Response] PreAuth',\r\n            content: preAuthResponse\r\n        });\r\n        await this._directoryServer.execute(preAuthResponse);\r\n        this._logger.log({\r\n            message: '[Request] Auth',\r\n            content: preAuthResponse\r\n        });\r\n        let authResponse = await this._auth(preAuthResponse);\r\n        this._logger.log({\r\n            message: '[Response] Auth',\r\n            content: authResponse\r\n        });\r\n        await this._challenge.execute(authResponse);\r\n        this._logger.log({\r\n            message: '[Request] PostAuth',\r\n            content: authResponse\r\n        });\r\n        let postAuthResponse = await this._postAuth(authResponse);\r\n        this._logger.log({\r\n            message: '[Response] PostAuth',\r\n            content: postAuthResponse\r\n        });\r\n        return {\r\n            ...postAuthResponse\r\n        };\r\n     }\r\n\r\n     _preAuth(request: IPreAuthRequest): Promise<IPreAuthResponse> {\r\n        return this._client.send<IPreAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/preAuth`,\r\n            method: 'POST',\r\n            body: {\r\n                browser: Browser.create()\r\n            }\r\n        });\r\n     }\r\n\r\n     _auth(request: IAuthRequest): Promise<IAuthResponse> {\r\n        return this._client.send<IAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v1/${request.id}/auth`,\r\n            method: 'POST'\r\n        });\r\n     }\r\n\r\n     _postAuth(request: IPostAuthRequest): Promise<IPostAuthResponse> {\r\n        return this._client.send<IAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/postAuth`,\r\n            method: 'POST'\r\n        });\r\n     }\r\n }\r\n\r\n "],"names":["Base64Converter","convert","data","json","JSON","stringify","Buffer","from","toString","replace","Browser","create","colorDepth","find","x","screen","javaEnabled","navigator","javascriptEnabled","language","userAgent","screenWidth","window","width","screenHeight","height","timezoneOffset","Date","getTimezoneOffset","acceptHeader","Delay","delay","_this","this","_task","_timeout","Promise","resolve","setTimeout","_proto","prototype","wait","cancel","clearTimeout","reject","message","sleep","id","HtmlElementFactory","createIFrame","_createIFrame$parent","iframe","document","createElement","name","useDefaultStyle","setAttribute","isVisible","style","opacity","parent","appendChild","createForm","form","action","actionUrl","target","method","createInput","input","type","_settle","pact","state","value","s","_Pact","then","onFulfilled","onRejected","result","callback","v","e","o","ChallengeWindowSize","LinearRetryPolicy","options","logger","_options","_logger","execute","executeFn","_exit","_temp4","_result2","lastError","attempt","_temp3","_do","_temp2","_result","attemptDelay","_temp","maxAttempts","isSuccess","isTransientError","_catch","error","log","additionalData","FetchHttpClient","retryPolicy","_retryPolicy","send","request","_ref","abortController","AbortController","timeoutId","abort","timeoutInSeconds","content","fetch","url","headers","_extends","accept","keepalive","body","signal","response","_this$isTransientErro","_response$ok","ok","_response$json","includes","status","ConsoleLogger","console","IFrameChallengeService","authResponse","container","IFRAME_NAME","onIFrameCreatedFn","FORM_NAME","challengeUrl","threeDSRequestInput","CREQ_INPUT_NAME","CREQ_INPUT_TYPE","cReq","threeDSServerTransID","processId","acsTransID","challengeId","messageVersion","challengeVersion","messageType","challengeWindowSize","width250xheight400","base64CReq","submit","IFrameDirectoryServerService","preAuthResponse","dsMethodUrl","_this$_options$onIFra","call","threeDSMethodDataInput","FORM_INPUT_NAME","FROM_INPUT_TYPE","threeDSMethodDataBase64","threeDSMethodNotificationURL","notificationUrl","ThreeDSecureService","httpClient","directoryServer","challenge","_client","_directoryServer","_challenge","_preAuth","_auth","_postAuth","postAuthResponse","threeDSecureUrl","browser"],"mappings":"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"}