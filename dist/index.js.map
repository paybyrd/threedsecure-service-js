{"version":3,"file":"index.js","sources":["../src/loggers/abstractions/LogLevel.ts","../src/shared/utils/Base64Converter.ts","../src/shared/utils/Browser.ts","../src/shared/utils/Delay.ts","../src/shared/utils/HtmlElementFactory.ts","../src/httpClients/retryPolicies/LinearRetryPolicy.ts","../src/services/abstractions/ChallengeWindowSize.ts","../src/httpClients/FetchHttpClient.ts","../src/loggers/ConsoleLogger.ts","../src/loggers/ElasticLogger.ts","../src/services/IFrameChallengeService.ts","../src/services/IFrameDirectoryServerService.ts","../src/services/ThreeDSecureService.ts"],"sourcesContent":["export enum LogLevel {\r\n    Trace = 0,\r\n    Debug = 1,\r\n    Information = 2,\r\n    Warning = 3,\r\n    Error = 4,\r\n    Critical = 5,\r\n    None = 6\r\n}\r\n","export class Base64Converter {\r\n    static convert(data: object) {\r\n        const json = JSON.stringify(data);\r\n        const base64Json = btoa(json);\r\n        return base64Json\r\n            .replace(/=/g, '')\r\n            .replace(/\\+/g, '-')\r\n            .replace(/\\//g, '_');\r\n    }\r\n}","import { IBrowser } from \"../abstractions\";\r\n\r\nexport class Browser {\r\n    static create(): IBrowser {\r\n        const allowedBrowserColorDepth = [48, 32, 24, 16, 15, 8, 4, 1];\r\n        const colorDepth = allowedBrowserColorDepth.find(x => x <= screen.colorDepth)!;\r\n        return {\r\n            javaEnabled: navigator.javaEnabled(),\r\n            javascriptEnabled: true,\r\n            language: navigator.language,\r\n            userAgent: navigator.userAgent,\r\n            screenWidth: window.screen.width,\r\n            screenHeight: window.screen.height,\r\n            timezoneOffset: new Date().getTimezoneOffset(),\r\n            colorDepth,\r\n            acceptHeader: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'\r\n        };\r\n    }\r\n}","import { IDelay } from \"../abstractions\";\r\n\r\nexport class Delay implements IDelay {\r\n    private _task: Promise<void>;\r\n    private _timeout: NodeJS.Timeout;\r\n    \r\n    constructor(delay: number) {\r\n        this._task = new Promise<void>((resolve) => {\r\n            this._timeout = setTimeout(resolve, delay);\r\n        });\r\n    }\r\n\r\n    wait() {\r\n        return this._task;\r\n    }\r\n\r\n    cancel() {\r\n        clearTimeout(this._timeout);\r\n        this._task = Promise.reject({\r\n            message: 'Timer cancelled'\r\n        });\r\n    }\r\n\r\n    static sleep(delay: number): IDelay {\r\n        return new Delay(delay);\r\n    }\r\n\r\n    static cancel(id: number) {\r\n        clearTimeout(id);\r\n    }\r\n}","import { ICreateForm, ICreateIFrame, ICreateInput } from \"./abstractions\";\r\n\r\nexport class HtmlElementFactory {\r\n    static createIFrame(createIFrame: ICreateIFrame) : HTMLIFrameElement {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.id = createIFrame.name;\r\n        iframe.name = createIFrame.name;\r\n\r\n        if (createIFrame.useDefaultStyle) {\r\n            iframe.setAttribute('style', `border: none;position: absolute; top: 0; left: 0; bottom: 0; right: 0; width: 100%; height: 100%;opacity: ${createIFrame.isVisible ? '1' : '0'}`);\r\n        }\r\n        else {\r\n            iframe.style.opacity = createIFrame.isVisible ? '1' : '0';            \r\n        }\r\n\r\n        createIFrame.parent?.appendChild(iframe);\r\n\r\n        return iframe;\r\n    }\r\n\r\n    static createForm(createForm: ICreateForm): HTMLFormElement {\r\n        const form = document.createElement('form');\r\n        form.id = createForm.name;\r\n        form.name = createForm.name;\r\n        form.action = createForm.actionUrl;\r\n        form.target = createForm.target;\r\n        form.method = createForm.method;\r\n        \r\n        createForm.parent.appendChild(form);\r\n\r\n        return form;\r\n    }\r\n\r\n    static createInput(createInput: ICreateInput): HTMLInputElement {\r\n        const input = document.createElement('input');\r\n        input.id = createInput.name;\r\n        input.name = createInput.name;\r\n        input.type = createInput.type;\r\n        \r\n        createInput.parent.appendChild(input);\r\n\r\n        return input;\r\n    }\r\n}","import { ILogger, LogLevel } from \"../../loggers/abstractions\";\r\nimport { IError } from \"../../shared/abstractions\";\r\nimport { Delay } from \"../../shared/utils\";\r\nimport { IRetryExecution, IRetryOptions, IRetryPolicy } from \"../abstractions\";\r\n\r\nexport class LinearRetryPolicy implements IRetryPolicy {\r\n    private readonly _options: IRetryOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IRetryOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n    \r\n    execute<T>({\r\n        executeFn,\r\n        method,\r\n        correlationId\r\n    }: IRetryExecution<T>) : Promise<T> {\r\n        return new Promise<T>(async (resolve, reject) => {\r\n            let attempt = 1;\r\n            let lastError: IError|null = null;\r\n            do {\r\n                try {\r\n                    let result = await executeFn({\r\n                        attempt: attempt,\r\n                        maxAttempts: this._options.maxAttempts\r\n                    });\r\n                    if (result.isSuccess) {\r\n                        resolve(result.data);\r\n                        return;\r\n                    }\r\n                    if (!result.isTransientError) {\r\n                        reject(result);\r\n                        return;\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    lastError = {\r\n                        message: `Unhandled error calling \"${method}\"`,\r\n                        error,\r\n                        additionalData: {\r\n                            attempt,\r\n                            maxAttempts: this._options.maxAttempts\r\n                        }\r\n                    };\r\n\r\n                    this._logger.log({\r\n                        message: `Unhandled error calling \"${method}\"`,\r\n                        error,\r\n                        content: {\r\n                            attempt,\r\n                            maxAttempts: this._options.maxAttempts\r\n                        },\r\n                        method: method,\r\n                        correlationId: correlationId,\r\n                        level: LogLevel.Warning\r\n                    });\r\n                }\r\n                attempt++;\r\n                await Delay.sleep(this._options.attemptDelay).wait();\r\n            } while (attempt <= this._options.maxAttempts);\r\n\r\n            reject(lastError);\r\n\r\n            this._logger.log({\r\n                message: `Unhandled error calling \"${method}\"`,\r\n                error: lastError?.error,\r\n                content: {\r\n                    attempt,\r\n                    maxAttempts: this._options.maxAttempts\r\n                },\r\n                method: method,\r\n                correlationId: correlationId,\r\n                level: LogLevel.Error\r\n            });\r\n        });\r\n    }\r\n}","export enum ChallengeWindowSize {\r\n    width250xheight400 = '01',\r\n    width390xheight400 = '02',\r\n    width500xheight600 = '03',\r\n    width600xheight400 = '04',\r\n    fullscreen = '05'\r\n}\r\n","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { IHttpClient, IHttpClientOptions, IRequest, IRetryPolicy } from \"./abstractions\";\r\nimport { LinearRetryPolicy } from \"./retryPolicies\";\r\n\r\nexport class FetchHttpClient implements IHttpClient {\r\n    private readonly _options: IHttpClientOptions;\r\n    private readonly _retryPolicy: IRetryPolicy;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IHttpClientOptions, logger: ILogger, retryPolicy: IRetryPolicy = new LinearRetryPolicy(options, logger)) {\r\n        this._retryPolicy = retryPolicy;\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n\r\n    async send<T>(request: IRequest): Promise<T> {\r\n        const self = this;\r\n        return await this._retryPolicy.execute<T>({\r\n            executeFn: async ({ attempt, maxAttempts }) => {\r\n                const timeout = (self._options.timeoutInSeconds || 30) * 1000;\r\n                const abortController = new AbortController();\r\n                const timeoutId = setTimeout(() => abortController.abort(), timeout);\r\n\r\n                this._logger.log({\r\n                    message: '[Request] HttpClient',\r\n                    content: {\r\n                        request,\r\n                        attempt,\r\n                        maxAttempts\r\n                    },\r\n                    method: \"send\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const response = await fetch(request.url, {\r\n                    headers: {\r\n                        ...request.headers,\r\n                        'x-attempt': attempt.toString(),\r\n                        'x-max-attempts': maxAttempts.toString(),\r\n                        'accept': 'application/json',\r\n                        'content-type': 'application/json',\r\n                    },\r\n                    keepalive: true,\r\n                    body: JSON.stringify(request.body),\r\n                    method: request.method,\r\n                    signal: abortController.signal\r\n                });\r\n\r\n                this._logger.log({\r\n                    message: '[Response] HttpClient',\r\n                    content: {\r\n                        response,\r\n                        attempt,\r\n                        maxAttempts\r\n                    },\r\n                    method: \"send\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                clearTimeout(timeoutId);\r\n                const result = await response.json();\r\n                return {\r\n                    isSuccess: response.ok,\r\n                    isTransientError: this.isTransientError(response),\r\n                    data: response.ok ? result.data : result\r\n                };\r\n            },\r\n            method: `[${request.method}] ${request.url}`,\r\n            correlationId: request.correlationId\r\n        });\r\n    }\r\n\r\n    isTransientError(response: Response): boolean {\r\n        const TRANSIENT_STATUS = [409, 424, 500, 503, 504];\r\n\r\n        return TRANSIENT_STATUS.includes(response.status);\r\n    }\r\n}","import { ILog, ILogger } from \"./abstractions\";\r\n\r\nexport class ConsoleLogger implements ILogger {\r\n    log(log: ILog): void {\r\n        console.log(JSON.stringify(log));\r\n    }\r\n\r\n}","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { LinearRetryPolicy } from \"../httpClients/retryPolicies\";\r\nimport { IElasticLoggerOptions, ILog, ILogger, LogLevel } from \"./abstractions\";\r\nimport { ConsoleLogger } from \"./ConsoleLogger\";\r\n\r\ninterface IFullLog {\r\n    service: {\r\n        name: string;\r\n        version: string\r\n    },\r\n    executionDate: Date,\r\n    entrypoint: string;\r\n    method: string;\r\n    correlationId: string;\r\n    level: LogLevel;\r\n    customMessage: string;\r\n    message: string;\r\n    content?: object;\r\n    exeption?: object;\r\n}\r\n\r\nexport class ElasticLogger implements ILogger {\r\n    private readonly _httpClient: IHttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IElasticLoggerOptions;\r\n    private _logs: Array<IFullLog> = [];\r\n\r\n    constructor(options: IElasticLoggerOptions,\r\n        logger: ILogger = new ConsoleLogger(),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger, new LinearRetryPolicy({\r\n            maxAttempts: 3,\r\n            attemptDelay: 5000\r\n        }, logger))) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n        this._httpClient = httpClient;\r\n        setInterval(this.sendBatch.bind(this), 1000);\r\n    }\r\n\r\n    log(log: ILog): void {\r\n        this._logger.log(log);\r\n\r\n        if (!this._options.elasticLoggerUrl)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._logs.push({\r\n            customMessage: log.message,\r\n            message: `[FRONTEND] ${log.message}`,\r\n            service: {\r\n                name: 'ThreeDSecure.Service.JS',\r\n                version: '3.0.0'\r\n            },\r\n            executionDate: new Date(),\r\n            entrypoint: 'Execute',\r\n            method: log.method,\r\n            correlationId: log.correlationId,\r\n            content: log.content,\r\n            level: log.level\r\n        });\r\n    }\r\n\r\n    async sendBatch() : Promise<void> {\r\n        const logs = this._logs.splice(0, 10);\r\n        if (!logs.length) {\r\n            return;\r\n        }\r\n        const correlationId = logs.map(x => x.correlationId)[0];\r\n        try {\r\n            await this._httpClient.send<void>({\r\n                url: this._options.elasticLoggerUrl,\r\n                method: 'POST',\r\n                body: logs,\r\n                correlationId\r\n            });\r\n        } catch (error) {\r\n            this._logger.log({\r\n                error: error,\r\n                message: 'Error sending message to elastic',\r\n                method: 'sendBatch',\r\n                correlationId,\r\n                level: LogLevel.Error\r\n            });\r\n        }\r\n    }\r\n}","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { ChallengeWindowSize, IChallengeExecute, IChallengeOptions, IChallengeService } from \"./abstractions\";\r\n\r\nexport class IFrameChallengeService implements IChallengeService {\r\n    private static readonly IFRAME_NAME = 'challengeIframe';\r\n    private static readonly FORM_NAME = 'challengeForm';\r\n    private static readonly CREQ_INPUT_NAME = 'creq';\r\n    private static readonly CREQ_INPUT_TYPE = 'hidden';\r\n\r\n    private readonly _options: IChallengeOptions;\r\n    private readonly _logger: ILogger;\r\n\r\n    constructor(options: IChallengeOptions, logger: ILogger) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n    }\r\n\r\n    execute(request: IChallengeExecute): Promise<void> {\r\n        if (!request.authResponse.challengeUrl) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: '[Request] Challenge execution',\r\n                    content: {\r\n                        authResponse: request.authResponse\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                 HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.IFRAME_NAME,\r\n                    isVisible: true,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn\r\n                });\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameChallengeService.FORM_NAME,\r\n                    actionUrl: request.authResponse.challengeUrl,\r\n                    target: IFrameChallengeService.IFRAME_NAME,\r\n                    method: 'post'\r\n                });\r\n\r\n                const threeDSRequestInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameChallengeService.CREQ_INPUT_NAME,\r\n                    type: IFrameChallengeService.CREQ_INPUT_TYPE\r\n                });\r\n\r\n                const cReq = {\r\n                    threeDSServerTransID: request.authResponse.processId,\r\n                    acsTransID: request.authResponse.challengeId,\r\n                    messageVersion: request.authResponse.challengeVersion,\r\n                    messageType: \"CReq\",\r\n                    challengeWindowSize: this._options.challengeWindowSize || ChallengeWindowSize.width250xheight400\r\n                };\r\n\r\n                const base64CReq = Base64Converter.convert(cReq)\r\n                threeDSRequestInput.value = base64CReq;\r\n\r\n                form.submit();\r\n\r\n                this._logger.log({\r\n                    message: '[Response] Challenge execution',\r\n                    content: {\r\n                        authResponse: request.authResponse,\r\n                        cReq,\r\n                        base64CReq\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: '[Error] Challenge execution',\r\n                    content: {\r\n                        authResponse: request.authResponse,\r\n                        error\r\n                    },\r\n                    method: \"executeChallenge\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Error\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}","import { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { Base64Converter, HtmlElementFactory } from \"../shared/utils\";\r\nimport { IDirectoryServerExecute, IDirectoryServerOptions, IDirectoryServerService } from \"./abstractions\";\r\n\r\nexport class IFrameDirectoryServerService implements IDirectoryServerService {\r\n    private static readonly IFRAME_NAME: string = 'threeDSMethodIframe';\r\n    private static readonly FORM_NAME: string = 'threeDSMethodForm';\r\n    private static readonly FORM_INPUT_NAME: string = 'threeDSMethodData';\r\n    private static readonly FROM_INPUT_TYPE: string = 'hidden';\r\n\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IDirectoryServerOptions;\r\n\r\n    constructor(options: IDirectoryServerOptions, logger: ILogger) {\r\n        this._logger = logger;\r\n        this._options = options;\r\n    }\r\n\r\n    execute(request: IDirectoryServerExecute) : Promise<void> {\r\n        if (!request.preAuthResponse.dsMethodUrl) {\r\n            return Promise.resolve();\r\n        }        \r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._logger.log({\r\n                    message: '[Request] DirectoryServer execution',\r\n                    content: request,\r\n                    method: \"directoryServerExecute\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                const iframe = HtmlElementFactory.createIFrame({\r\n                    parent: this._options.container,\r\n                    isVisible: false,\r\n                    name: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    useDefaultStyle: !!this._options.onIFrameCreatedFn\r\n                });\r\n                this._options.onIFrameCreatedFn?.call(this._options, iframe);\r\n                \r\n                const form = HtmlElementFactory.createForm({\r\n                    parent: this._options.container,\r\n                    name: IFrameDirectoryServerService.FORM_NAME,\r\n                    actionUrl: request.preAuthResponse.dsMethodUrl,\r\n                    target: IFrameDirectoryServerService.IFRAME_NAME,\r\n                    method: 'POST'\r\n                });\r\n\r\n                const threeDSMethodDataInput = HtmlElementFactory.createInput({\r\n                    parent: form,\r\n                    name: IFrameDirectoryServerService.FORM_INPUT_NAME,\r\n                    type: IFrameDirectoryServerService.FROM_INPUT_TYPE\r\n                });\r\n\r\n                const threeDSMethodData = {\r\n                    threeDSServerTransID: request.preAuthResponse.processId,\r\n                    threeDSMethodNotificationURL: request.preAuthResponse.notificationUrl\r\n                };\r\n\r\n                const threeDSMethodDataBase64 = Base64Converter.convert(threeDSMethodData)\r\n                threeDSMethodDataInput.value = threeDSMethodDataBase64;\r\n\r\n                form.submit();\r\n\r\n                this._logger.log({\r\n                    message: '[Response] DirectoryServer execution',\r\n                    content: {\r\n                        request,\r\n                        threeDSMethodDataBase64\r\n                    },\r\n                    method: \"directoryServerExecute\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Information\r\n                });\r\n\r\n                resolve();\r\n            }\r\n            catch (error) {\r\n                this._logger.log({\r\n                    message: '[Error] DirectoryServer execution',\r\n                    content: {\r\n                        request,\r\n                        error\r\n                    },\r\n                    method: \"directoryServerExecute\",\r\n                    correlationId: request.correlationId,\r\n                    level: LogLevel.Error\r\n                });\r\n\r\n                return reject({\r\n                    message: error.toString()\r\n                });\r\n            }\r\n        });\r\n    }\r\n}","import { FetchHttpClient } from \"../httpClients\";\r\nimport { IHttpClient } from \"../httpClients/abstractions\";\r\nimport { ILogger, LogLevel } from \"../loggers/abstractions\";\r\nimport { ElasticLogger } from \"../loggers\";\r\nimport { Browser } from \"../shared/utils\";\r\nimport { IAuthResponse, IChallengeService, IDirectoryServerService, IExecuteRequest, IPostAuthResponse, IThreeDSecureOptions, IThreeDSecureService } from \"./abstractions\";\r\nimport { IPreAuthResponse } from \"./abstractions/IPreAuthResponse\";\r\nimport { IFrameChallengeService } from \"./IFrameChallengeService\";\r\nimport { IFrameDirectoryServerService } from \"./IFrameDirectoryServerService\";\r\n\r\n export class ThreeDSecureService implements IThreeDSecureService {\r\n    private readonly _options: IThreeDSecureOptions;\r\n    private readonly _logger: ILogger;\r\n    private readonly _client: IHttpClient;\r\n    private readonly _directoryServer: IDirectoryServerService;\r\n    private readonly _challenge: IChallengeService;\r\n\r\n    constructor(\r\n        options: IThreeDSecureOptions,\r\n        logger: ILogger = new ElasticLogger(options),\r\n        httpClient: IHttpClient = new FetchHttpClient(options, logger),\r\n        directoryServer: IDirectoryServerService = new IFrameDirectoryServerService(options, logger),\r\n        challenge: IChallengeService = new IFrameChallengeService(options, logger)) {\r\n        this._options = options;\r\n        this._logger = logger;\r\n        this._client = httpClient;\r\n        this._directoryServer = directoryServer;\r\n        this._challenge = challenge;\r\n    }\r\n\r\n     async execute(request: IExecuteRequest): Promise<IPostAuthResponse> {\r\n        let preAuthResponse = await this._preAuth(request);\r\n        await this._directoryServer.execute({\r\n            preAuthResponse,\r\n            correlationId: request.correlationId\r\n        });\r\n        let authResponse = await this._auth(request);\r\n        await this._challenge.execute({\r\n            authResponse,\r\n            correlationId: request.correlationId\r\n        });\r\n        let postAuthResponse = await this._postAuth(request);\r\n        return postAuthResponse;\r\n     }\r\n\r\n     _preAuth(request: IExecuteRequest): Promise<IPreAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing PreAuth',\r\n            content: request,\r\n            method: \"_preAuth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        return this._client.send<IPreAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/preAuth`,\r\n            method: 'POST',\r\n            body: {\r\n                browser: Browser.create()\r\n            },\r\n            correlationId: request.correlationId\r\n        });\r\n     }\r\n\r\n     _auth(request: IExecuteRequest): Promise<IAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing Auth',\r\n            content: request,\r\n            method: \"_auth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        return this._client.send<IAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v1/${request.id}/auth`,\r\n            method: 'POST',\r\n            correlationId: request.correlationId\r\n        });\r\n     }\r\n\r\n     _postAuth(request: IExecuteRequest): Promise<IPostAuthResponse> {\r\n        this._logger.log({\r\n            message: 'Executing PostAuth',\r\n            content: request,\r\n            method: \"_postAuth\",\r\n            correlationId: request.correlationId,\r\n            level: LogLevel.Information\r\n        });\r\n        return this._client.send<IPostAuthResponse>({\r\n            url: `${this._options.threeDSecureUrl}/api/v2/${request.id}/postAuth`,\r\n            method: 'POST',\r\n            correlationId: request.correlationId\r\n        });\r\n     }\r\n }\r\n\r\n "],"names":["LogLevel","Base64Converter","convert","data","json","JSON","stringify","btoa","replace","Browser","create","colorDepth","find","x","screen","javaEnabled","navigator","javascriptEnabled","language","userAgent","screenWidth","window","width","screenHeight","height","timezoneOffset","Date","getTimezoneOffset","acceptHeader","Delay","delay","_this","this","_task","_timeout","Promise","resolve","setTimeout","_proto","prototype","wait","cancel","clearTimeout","reject","message","sleep","id","HtmlElementFactory","createIFrame","_createIFrame$parent","iframe","document","createElement","name","useDefaultStyle","setAttribute","isVisible","style","opacity","parent","appendChild","createForm","form","action","actionUrl","target","method","createInput","input","type","pact","state","value","s","o","_settle","bind","then","observer","_Pact","onFulfilled","onRejected","result","callback","v","e","_isSettledPact","thenable","ChallengeWindowSize","LinearRetryPolicy","options","logger","_options","_logger","execute","_ref","executeFn","correlationId","_exit","_temp4","_result2","_lastError","lastError","log","error","content","attempt","maxAttempts","level","Error","_temp3","_do","_temp2","_result","attemptDelay","_temp","isSuccess","isTransientError","_catch","additionalData","Warning","FetchHttpClient","retryPolicy","_retryPolicy","send","request","self","timeout","timeoutInSeconds","abortController","AbortController","timeoutId","abort","Information","fetch","url","headers","_extends","toString","accept","keepalive","body","signal","response","ok","includes","status","ConsoleLogger","console","ElasticLogger","httpClient","_httpClient","_logs","setInterval","sendBatch","elasticLoggerUrl","push","customMessage","service","version","executionDate","entrypoint","logs","splice","length","map","IFrameChallengeService","authResponse","challengeUrl","container","IFRAME_NAME","onIFrameCreatedFn","FORM_NAME","threeDSRequestInput","CREQ_INPUT_NAME","CREQ_INPUT_TYPE","cReq","threeDSServerTransID","processId","acsTransID","challengeId","messageVersion","challengeVersion","messageType","challengeWindowSize","width250xheight400","base64CReq","submit","IFrameDirectoryServerService","preAuthResponse","dsMethodUrl","_this$_options$onIFra","call","threeDSMethodDataInput","FORM_INPUT_NAME","FROM_INPUT_TYPE","threeDSMethodDataBase64","threeDSMethodNotificationURL","notificationUrl","ThreeDSecureService","directoryServer","challenge","_client","_directoryServer","_challenge","_preAuth","_auth","_postAuth","threeDSecureUrl","browser"],"mappings":"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"}